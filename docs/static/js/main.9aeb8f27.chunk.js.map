{"version":3,"sources":["store/index.ts","store/actions.ts","store/initial-state.ts","store/reducer.ts","types/index.ts","components/loading/loading.svg","components/loading/Loading.tsx","models/Card.ts","constants/index.ts","utils/index.ts","models/Deck.ts","components/preloader/Preloader.tsx","components/card/Card.tsx","components/deck/Deck.tsx","components/table/Table.tsx","components/wrap/Wrap.tsx","components/button/Button.tsx","components/overlay/Overlay.tsx","components/switch/Switch.tsx","components/header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SET_CARDS_PRELOADED","SET_LEFT_SIDE_SELECTION","INCREASE_LEFT_SCORE","SET_RIGHT_SIDE_SELECTION","INCREASE_RIGHT_SCORE","SET_ROUND_WINNER","TOGGLE_CARD_REVEALED","TOGGLE_FULL_AUTOPLAY","SET_GAME_OVER","RESTART","emptySelection","initialState","cardsPreloaded","leftSide","leftScore","rightSide","rightScore","fullAutoPlay","cardsRevealed","gameOver","reducer","state","action","type","payload","roundWinner","Error","ColorEnum","SideEnum","WinnerEnum","SizeEnum","Loading","props","className","cl","small","size","big","src","loadingIcon","alt","Card","rank","rankId","id","front","back","color","this","appParams","name","SCREEN_BASE_HEIGHT","SCREEN_MIN_ASPECT_RATIO","dWidth","window","innerWidth","dHeight","innerHeight","addEventListener","fromRemToPx","sizeInRems","Math","min","ranks","suits","Deck","cards","cardsInDeck","populateRank","j","jl","length","push","shuffle","array","i","copy","n","floor","random","arrayShuffle","pullCardByIndex","index","splice","pullCardById","cardIndex","findIndex","item","collect","l","Preloader","colors","onLoading","firstDeck","useRef","DeckModel","secondDeck","cardsList","current","useState","loadingCounter","setLoadingCounter","totalCardsAmount","useEffect","imageLoadingHandler","useCallback","progress","round","map","card","PreloaderCard","onLoad","onError","cardClassName","flexible","open","autoPlayCard","autoPlay","disabled","list","side","containerClassName","cardMargin","padding","parseInt","property","element","result","document","documentElement","styles","getComputedStyle","forEach","getPropertyValue","getCssProperty","DeckCard","revealed","position","onClick","rect","onCardChoose","clickHandler","el","left","offsetLeft","right","top","offsetTop","width","offsetWidth","height","offsetHeight","autoSelectFrame","setTimeout","clearTimeout","ref","style","transform","Table","onClear","container","refreshTableTimer","TableCard","wrapper","zIndex","React","cardRect","CSSTransition","in","nodeRef","unmountOnExit","timeout","classNames","Wrap","containerEl","useLayoutEffect","resizeHandler","curAspectRatio","Object","keys","setProperty","fontSize","setContainerSize","removeEventListener","children","Button","text","Overlay","ReactDOM","createPortal","title","buttonText","body","Switch","onChange","e","target","checked","Header","dispatch","actions","leftDeckColor","green","rightDeckColor","red","Canvas","leftDeck","rightDeck","useReducer","initialAppState","cardChooseHandler","cardId","setScore","winner","restart","finishRoundTimer","draw","winnerScore","gameOverText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9aeb8f27.chunk.js","sourcesContent":["\nimport initialState from './initial-state';\nimport * as actions from './actions';\nimport reducer from './reducer';\n\nexport {\n    initialState as initialAppState,\n    actions,\n    reducer,\n};\n\nexport * from './types';\n","\nexport const SET_CARDS_PRELOADED = 'SET_CARDS_PRELOADED';\nexport const SET_LEFT_SIDE_SELECTION = 'SET_LEFT_SIDE_SELECTION';\nexport const INCREASE_LEFT_SCORE = 'INCREASE_LEFT_SCORE';\nexport const SET_RIGHT_SIDE_SELECTION = 'SET_RIGHT_SIDE_SELECTION';\nexport const INCREASE_RIGHT_SCORE = 'INCREASE_RIGHT_SCORE';\nexport const SET_ROUND_WINNER = 'SET_ROUND_WINNER';\nexport const TOGGLE_CARD_REVEALED = 'TOGGLE_CARD_REVEALED';\nexport const TOGGLE_FULL_AUTOPLAY = 'TOGGLE_FULL_AUTOPLAY';\nexport const SET_GAME_OVER = 'SET_GAME_OVER';\nexport const RESTART = 'RESTART';\n","\nimport { AppState } from './types';\nimport { SideSelection } from '../types';\n\nconst emptySelection: SideSelection = {};\n\nconst initialState: AppState = {\n    cardsPreloaded: false,\n    leftSide: emptySelection,\n    leftScore: 0,\n    rightSide: emptySelection,\n    rightScore: 0,\n    fullAutoPlay: false,\n    cardsRevealed: false,\n    gameOver: false,\n};\n\nexport default initialState;\n","\nimport initialState from './initial-state';\nimport {\n    INCREASE_LEFT_SCORE,\n    INCREASE_RIGHT_SCORE,\n    RESTART,\n    SET_CARDS_PRELOADED,\n    SET_LEFT_SIDE_SELECTION,\n    SET_RIGHT_SIDE_SELECTION,\n    SET_ROUND_WINNER,\n    TOGGLE_FULL_AUTOPLAY,\n    TOGGLE_CARD_REVEALED,\n    SET_GAME_OVER,\n} from './actions';\nimport {Action, AppState,} from './types';\n\nexport default function reducer(state: AppState, action: Action): AppState {\n    switch (action.type) {\n        case SET_CARDS_PRELOADED:\n            return {\n                ...state,\n                cardsPreloaded: action.payload,\n            };\n\n        case SET_LEFT_SIDE_SELECTION:\n            return {\n                ...state,\n                leftSide: action.payload,\n            };\n\n        case INCREASE_LEFT_SCORE:\n            return {\n                ...state,\n                leftScore: state.leftScore + 1,\n            };\n\n        case SET_RIGHT_SIDE_SELECTION:\n            return {\n                ...state,\n                rightSide: action.payload,\n            };\n\n        case INCREASE_RIGHT_SCORE:\n            return {\n                ...state,\n                rightScore: state.rightScore + 1,\n            };\n\n        case SET_ROUND_WINNER:\n            return {\n                ...state,\n                roundWinner: action.payload,\n                leftSide: !!action.payload ? state.leftSide : initialState.leftSide,\n                rightSide: !!action.payload ? state.rightSide : initialState.rightSide,\n            };\n\n        case TOGGLE_CARD_REVEALED:\n            return {\n                ...state,\n                cardsRevealed: !state.cardsRevealed,\n            };\n\n        case TOGGLE_FULL_AUTOPLAY:\n            return {\n                ...state,\n                fullAutoPlay: !state.fullAutoPlay,\n            };\n\n        case SET_GAME_OVER:\n            return {\n                ...state,\n                gameOver: true,\n            };\n\n        case RESTART:\n            return {\n                ...state,\n                leftScore: 0,\n                rightScore: 0,\n                gameOver: false,\n            };\n\n        default:\n            throw new Error();\n    }\n}\n","\nimport CardModel from '../models/Card';\n\nexport enum ColorEnum {\n    red = 'red',\n    green = 'green',\n    blue = 'blue',\n    yellow = 'yellow',\n    gray = 'gray',\n    purple = 'purple',\n}\n\nexport enum SideEnum {\n    left = 'left',\n    right = 'right',\n}\n\nexport type CardRect = {\n    top: number,\n    left: number,\n    width: number,\n    height: number,\n};\n\nexport type SideSelection = {\n    card?: CardModel,\n    rect?: CardRect,\n};\n\nexport enum WinnerEnum {\n    left = 'left',\n    right = 'right',\n    draw = 'draw',\n}\n\nexport enum SizeEnum {\n    small = 'small',\n    big = 'big',\n    flexible = 'flexible',\n}","export default __webpack_public_path__ + \"static/media/loading.4f271669.svg\";","// @flow\n\nimport React from 'react';\nimport cl from 'classnames';\nimport loadingIcon from './loading.svg';\nimport { SizeEnum } from '../../types';\nimport './style.css';\n\ninterface Props {\n    size?: string,\n    className?: string | { [className: string]: any },\n}\n\nexport default function Loading(props: Props) {\n    const className = cl(\n        'loading-icon',\n        {\n            small: props.size === SizeEnum.small,\n            big: props.size === SizeEnum.big,\n        },\n        props.className\n    );\n\n    return (\n        <img src={loadingIcon} alt=\"\" className={className} />\n    );\n}\n","\nimport appParams from '../../package.json';\nimport { ColorEnum } from '../types';\n\ninterface Props {\n    id: string,\n    rank: number,\n    rankId: string,\n    color: ColorEnum,\n}\n\nexport default class Card {\n    constructor(props: Props) {\n        this.id = props.id;\n        this.rank = props.rank;\n        this.rankId = props.rankId;\n        this.front = `/${appParams.name}/cards/${props.id}.png`;\n        this.back = `/${appParams.name}/cards/${props.color}_back.png`;\n        this.color = props.color;\n    }\n\n    rank: number;\n\n    rankId: string;\n\n    id: string;\n\n    front: string;\n\n    back: string;\n\n    color: ColorEnum;\n}\n","\nexport const SCREEN_BASE_WIDTH = 192; // in rem\nexport const SCREEN_BASE_HEIGHT = 108; // in rem\nexport const SCREEN_MIN_ASPECT_RATIO = 1.777;\nexport const SCREEN_MAX_ASPECT_RATIO = 2;\n","\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n} from '../constants';\n\n// https://bost.ocks.org/mike/shuffle/\nexport function arrayShuffle<T>(array: T[]): T[] {\n    const copy: T[] = [];\n    let n = array.length;\n    let i;\n\n    while (n) {\n        i = Math.floor(Math.random() * array.length);\n        if (i in array) {\n            copy.push(array[i]);\n            delete array[i];\n            n--;\n        }\n    }\n\n    return copy;\n}\n\nexport const getCssProperty = (\n    property: string[],\n    element?: HTMLElement | null\n): string[] => {\n    const result: string[] = [];\n\n    if (!document.documentElement) {\n        return result;\n    }\n\n    const styles = getComputedStyle(element || document.documentElement);\n\n    property.forEach((item: string) => {\n        result.push(styles.getPropertyValue(`--${item}`));\n    });\n\n    return result;\n};\n\nlet dWidth = window.innerWidth;\nlet dHeight = window.innerHeight;\n\nwindow.addEventListener('resize', () => {\n    dWidth = window.innerWidth;\n    dHeight = window.innerHeight;\n});\n\nexport const fromPxToRem = (sizeInPixels: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInPixels / fontSize;\n};\n\nexport const fromRemToPx = (sizeInRems: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInRems * fontSize;\n};\n","\nimport Card from './Card';\nimport { arrayShuffle } from '../utils';\nimport { ColorEnum } from '../types';\n\nconst ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\nconst suits = ['C', 'D', 'H', 'S'];\n\nexport default class Deck {\n    constructor(color: ColorEnum) {\n        for (let i = 0, l = ranks.length; i < l; i++) {\n            this.populateRank(i, color);\n        }\n        this.cardsInDeck = [ ...this.cards ];\n        this.shuffle();\n    }\n\n    cards: Card[] = [];\n\n    cardsInDeck: Card[] = [];\n\n    private populateRank = (rank: number, color: ColorEnum) => {\n        for (let j = 0, jl = suits.length; j < jl; j++) {\n            const id = `${ranks[rank]}${suits[j]}`;\n            this.cards.push(new Card({\n                rank,\n                rankId: ranks[rank],\n                id,\n                color,\n            }));\n        }\n    };\n\n    shuffle = () => {\n        this.cardsInDeck = arrayShuffle(this.cardsInDeck);\n    };\n\n    pullCardByIndex = (index: number): Card | null => {\n        if (index < 0 || index > this.cardsInDeck.length) {\n            return null;\n        }\n\n        return this.cardsInDeck.splice(index, 1)[0] || null;\n    };\n\n    pullCardById = (id: string): Card | null => {\n        const cardIndex = this.cardsInDeck.findIndex((item) => item.id === id);\n\n        if (cardIndex !== -1) {\n            return this.cardsInDeck.splice(cardIndex, 1)[0] || null;\n\n        }\n\n        return null;\n    };\n\n    collect = () => {\n        this.cardsInDeck = [...this.cards];\n        this.shuffle();\n    };\n}\n","\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport Loading from '../loading';\nimport DeckModel from '../../models/Deck';\nimport CardModel from '../../models/Card';\nimport { ColorEnum } from '../../types';\nimport './style.css';\n\ninterface Props {\n    colors: ColorEnum[],\n    onLoading: () => void,\n}\n\nexport default function Preloader(props: Props) {\n    const {\n        colors,\n        onLoading,\n    } = props;\n    const firstDeck = useRef(new DeckModel(colors[0]));\n    const secondDeck = useRef(new DeckModel(colors[1]));\n    const cardsList = firstDeck.current.cards;\n    const [loadingCounter, setLoadingCounter] = useState(0);\n\n    const totalCardsAmount = cardsList.length + 2;\n\n    useEffect(() => {\n        if (loadingCounter === totalCardsAmount) {\n            onLoading();\n        }\n    }, [loadingCounter, totalCardsAmount, onLoading]);\n\n    const imageLoadingHandler = useCallback(() => {\n        setLoadingCounter(loadingCounter + 1);\n    }, [loadingCounter]);\n\n    const progress = Math.round(loadingCounter / (totalCardsAmount / 100));\n\n    return (\n        <div className=\"preloader-container blocker\">\n            <Loading />\n            <div className=\"pc-progress\">\n                {progress || 0}\n                %\n            </div>\n            <div className=\"preloader-deck\">\n                { cardsList.map((card: CardModel) => (\n                    <PreloaderCard\n                        key={card.id}\n                        src={card.front}\n                        onLoad={imageLoadingHandler}\n                        onError={onLoading}\n                    />\n                )) }\n                <PreloaderCard\n                    src={cardsList[0].back}\n                    onLoad={imageLoadingHandler}\n                    onError={onLoading}\n                />\n                <PreloaderCard\n                    src={secondDeck.current.cards[0].back}\n                    onLoad={imageLoadingHandler}\n                    onError={onLoading}\n                />\n            </div>\n        </div>\n    );\n}\n\ninterface CardProps {\n    src: string,\n    onLoad: () => void,\n    onError: () => void,\n}\n\nfunction PreloaderCard(props: CardProps) {\n    return (\n        <img\n            src={props.src}\n            className=\"pcd-card\"\n            alt=\"\"\n            onLoad={props.onLoad}\n            onError={props.onError}\n        />\n    );\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport { SizeEnum } from '../../types';\nimport './style.css';\n\ninterface Props extends CardModel {\n    size: SizeEnum,\n    open?: boolean,\n}\n\nexport default function Card(props: Props) {\n    if (props.id === '') {\n        return null;\n    }\n\n    const cardClassName = cl('cc-image', {\n        small: props.size === SizeEnum.small,\n        big: props.size === SizeEnum.big,\n        flexible: props.size === SizeEnum.flexible,\n    });\n\n    return (\n        <div className=\"card-container\">\n            <img\n                src={props.open ? props.front : props.back}\n                className={cardClassName}\n                alt=\"\"\n            />\n        </div>\n    );\n}","\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport CardComponent from '../card';\nimport { SCREEN_BASE_HEIGHT } from '../../constants';\nimport {\n    fromRemToPx,\n    getCssProperty,\n} from '../../utils';\nimport {\n    SideEnum,\n    SizeEnum,\n    CardRect,\n} from '../../types';\nimport './style.css';\n\nconst cardWidth = 10; // in rem\nconst deckHeight = (SCREEN_BASE_HEIGHT - cardWidth); // in rem\n\ninterface Props {\n    autoPlay?: boolean,\n    side: SideEnum,\n    disabled: boolean,\n    revealed?: boolean,\n    list: CardModel[],\n    onCardChoose: (side: SideEnum, cardId: string, rect: CardRect) => void,\n}\n\nexport default function Deck(props: Props) {\n    const {\n        autoPlay,\n        disabled,\n        list,\n        side,\n    } = props;\n\n    const containerClassName = cl('deck-container', `dc-${side}`, {\n        disabled,\n    });\n\n    const cardMargin = deckHeight / (list.length - 1);\n    let padding = parseInt(getCssProperty(['hover-padding'])[0],10);\n\n    let autoPlayCard: number;\n    if (autoPlay && !disabled) {\n        autoPlayCard = Math.floor(Math.random() * list.length);\n    }\n\n    return (\n        <div className={containerClassName}>\n            {list.map((card: CardModel, i) => (\n                <DeckCard\n                    key={card.id}\n                    side={side}\n                    card={card}\n                    autoPlay={i === autoPlayCard}\n                    revealed={props.revealed}\n                    disabled={disabled}\n                    position={i * cardMargin}\n                    padding={padding || 0}\n                    onClick={(rect: CardRect) => {\n                        props.onCardChoose(side, card.id, rect);\n                    }}\n                />\n            ))}\n            { disabled && <div className=\"blocker\" /> }\n        </div>\n    );\n}\n\ninterface DeckCardProps {\n    side: SideEnum,\n    card: CardModel,\n    autoPlay: boolean,\n    revealed?: boolean,\n    disabled: boolean,\n    position: number,\n    padding: number,\n    onClick: (rect: CardRect) => any,\n}\n\nfunction DeckCard(props: DeckCardProps) {\n    const {\n        autoPlay,\n        revealed,\n        disabled,\n        onClick,\n        padding,\n        side,\n    } = props;\n    const element = useRef<HTMLDivElement>(null);\n    const translateY = 2.65;\n\n    const clickHandler = useCallback(() => {\n        if (element.current !== null) {\n            const el = element.current;\n            let left = el.offsetLeft;\n\n            if (side === SideEnum.right) {\n                left -= fromRemToPx(padding);\n            }\n\n            const rect: CardRect = {\n                top: el.offsetTop - fromRemToPx(translateY),\n                left,\n                width: el.offsetWidth,\n                height: el.offsetHeight,\n            };\n            onClick(rect);\n        }\n    }, [element, padding, side, onClick]);\n\n    useEffect(() => {\n        const autoSelectFrame = setTimeout(() => {\n            if (autoPlay && !disabled) {\n                clickHandler();\n            }\n        }, 10);\n        return () => clearTimeout(autoSelectFrame);\n    }, [autoPlay, disabled, clickHandler]);\n\n    return (\n        <div\n            ref={element}\n            className=\"dc-item\"\n            style={{\n                top: `${props.position}rem`,\n                transform: `translate(-50%, -${translateY}rem) rotate(-90deg)`,\n            }}\n            onClick={() => {\n                if (!autoPlay) {\n                    clickHandler();\n                }\n            }}\n        >\n            <CardComponent\n                {...props.card}\n                open={revealed}\n                size={SizeEnum.small}\n            />\n        </div>\n    );\n}","import React, {useEffect, useRef} from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport cl from 'classnames';\nimport CardComponent from '../card/Card';\nimport CardModel from '../../models/Card';\nimport {\n    SideSelection,\n    SideEnum,\n    SizeEnum,\n    CardRect,\n    WinnerEnum,\n} from '../../types';\nimport './style.css';\n\nconst REFRESH_TABLE_TIME = 500;\n\ninterface Props {\n    leftSide: SideSelection,\n    rightSide: SideSelection,\n    roundWinner?: WinnerEnum,\n    onClear: (roundWinner: WinnerEnum) => void,\n}\n\nexport default function Table(props: Props) {\n    const {\n        leftSide,\n        rightSide,\n        roundWinner,\n        onClear,\n    } = props;\n    const container = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const refreshTableTimer = setTimeout(() => {\n            if (roundWinner) {\n                onClear(roundWinner); // eslint-disable-line react-hooks/exhaustive-deps\n            }\n        }, REFRESH_TABLE_TIME);\n        return () => clearTimeout(refreshTableTimer);\n    }, [roundWinner, onClear]);\n\n    return (\n        <div className=\"table-container\" ref={container}>\n            <TableCard\n                side={SideEnum.left}\n                card={leftSide.card}\n                rect={leftSide.rect}\n                wrapper={container.current}\n                zIndex={2}\n                roundWinner={roundWinner}\n            />\n            <TableCard\n                side={SideEnum.right}\n                card={rightSide.card}\n                rect={rightSide.rect}\n                wrapper={container.current}\n                zIndex={1}\n                roundWinner={roundWinner}\n            />\n        </div>\n    );\n}\n\ninterface TableCardProps {\n    side: SideEnum,\n    card?: CardModel,\n    rect?: CardRect,\n    wrapper: HTMLDivElement | null,\n    zIndex: number,\n    roundWinner?: WinnerEnum,\n}\n\nfunction TableCard(props: TableCardProps) {\n    const container = React.useRef(null);\n    const {\n        side,\n        card,\n        wrapper,\n        roundWinner,\n    } = props;\n\n    const cardRect = props.rect;\n    let rect = {};\n    if (cardRect && wrapper !== null) {\n        let left = cardRect.left;\n        if (side === SideEnum.left) {\n            left -= wrapper.offsetLeft;\n        } else if (side === SideEnum.right) {\n            left += wrapper.offsetWidth;\n        }\n        rect = {\n            top: cardRect.top - wrapper.offsetTop,\n            left,\n            width: cardRect.width,\n            height: cardRect.height,\n        };\n    }\n\n    const className = cl('tc-card-container', {\n        [`tc-${side}-card`]: side,\n        [`tc-winner-${roundWinner}`]: roundWinner,\n    });\n\n    return (\n        <CSSTransition\n            in={card && !roundWinner}\n            nodeRef={container}\n            unmountOnExit\n            timeout={REFRESH_TABLE_TIME}\n            classNames=\"tccc-wrapper\"\n        >\n            <div\n                ref={container}\n                className={className}\n                style={{\n                    ...rect,\n                    zIndex: props.zIndex,\n                }}\n            >\n                <div className=\"tccc-inner\">\n                    <div className=\"rccc-front\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                size={SizeEnum.flexible}\n                            />\n                        )}\n                    </div>\n                    <div className=\"rccc-back\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                open\n                                size={SizeEnum.flexible}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </CSSTransition>\n    );\n}\n","\nimport React, { useRef, useLayoutEffect } from 'react';\nimport cl from 'classnames';\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n    SCREEN_MIN_ASPECT_RATIO,\n    SCREEN_MAX_ASPECT_RATIO,\n} from '../../constants';\nimport './style.css';\n\nconst setContainerSize = (el: HTMLDivElement | null) => {\n    const documentElement = document.documentElement;\n    if (!el || !documentElement) {\n        return;\n    }\n\n    const dWidth = window.innerWidth;\n    const dHeight = window.innerHeight;\n    const curAspectRatio = dWidth / dHeight;\n    const style = {\n        width: dWidth,\n        height: dHeight,\n    };\n    if (curAspectRatio < SCREEN_MIN_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MIN_ASPECT_RATIO;\n    } else if (curAspectRatio > SCREEN_MAX_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MAX_ASPECT_RATIO;\n    }\n\n    if (style.width > dWidth) {\n        style.width = dWidth;\n        style.height = dWidth / SCREEN_MIN_ASPECT_RATIO;\n    }\n\n    Object.keys(style).forEach((item) => {\n        if (item === 'width' || item === 'height') {\n            el.style.setProperty(item, `${style[item]}px`);\n        }\n    });\n\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n    documentElement.style.fontSize = `${fontSize}px`;\n};\n\ninterface Props {\n    className?: string | { [className: string]: any },\n    children: React.ReactNode,\n}\n\nexport default function Wrap(props: Props) {\n    const containerEl = useRef(null);\n    const className = cl('resizable-container', props.className);\n\n    useLayoutEffect(() => {\n        const resizeHandler = () => {\n            setContainerSize(containerEl.current);\n        };\n        resizeHandler();\n\n        window.addEventListener('resize', resizeHandler);\n        return () => {\n            window.removeEventListener('resize', resizeHandler);\n        };\n    }, []);\n\n    return (\n        <div\n            ref={containerEl}\n            className={className}\n        >\n            { props.children }\n        </div>\n    );\n}\n","\nimport React from 'react';\nimport cl from 'classnames';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    className?: string | { [className: string]: any },\n    onClick: () => any,\n}\n\nexport default function Button(props: Props) {\n    return (\n        <button\n            type=\"button\"\n            className={cl('button', props.className)}\n            onClick={props.onClick}\n        >\n            {props.text}\n        </button>\n    );\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport WrapComponent from '../wrap';\nimport ButtonComponent from '../button';\nimport './style.css';\n\ninterface Props {\n    title: string,\n    text: string,\n    buttonText: string,\n    onClick: () => any,\n}\n\nexport default function Overlay(props: Props) {\n    return ReactDOM.createPortal(\n        (\n            <WrapComponent className=\"overlay\">\n                <div className=\"blocker\" />\n                <div className=\"overlay-content\">\n                    <h1 className=\"overlay-title\">{props.title}</h1>\n                    <p className=\"overlay-text\">{props.text}</p>\n                    <ButtonComponent text={props.buttonText} onClick={props.onClick} />\n                </div>\n            </WrapComponent>\n        ),\n        document.body\n    );\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    className?: string | { [className: string]: any },\n    onChange: (value: boolean) => void,\n}\n\nexport default function Switch(props: Props) {\n    const className = cl('switch-container', props.className);\n    return (\n        <label className={className}>\n            <div className=\"switch\">\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                        props.onChange(e.target.checked);\n                    }}\n                />\n                <span className=\"slider\" />\n            </div>\n            <p className=\"switch-text\">{props.text}</p>\n        </label>\n    );\n};\n","\nimport React from 'react';\nimport SwitchComponent from '../switch';\nimport { actions, Action } from '../../store';\nimport './style.css';\n\ninterface Props {\n    leftScore: number,\n    rightScore: number,\n    dispatch: (action: Action) => void,\n}\n\nexport default function Header(props: Props) {\n    return (\n        <div className=\"header-container\">\n            <div className=\"hc-score hcs-left\">\n                {props.leftScore}\n            </div>\n            <SwitchComponent\n                text=\"Reveal cards\"\n                className=\"hc-switch\"\n                onChange={() => {\n                    props.dispatch({\n                        type: actions.TOGGLE_CARD_REVEALED,\n                    });\n                }}\n            />\n            <SwitchComponent\n                text=\"Autoplay\"\n                className=\"hc-switch\"\n                onChange={() => {\n                    props.dispatch({\n                        type: actions.TOGGLE_FULL_AUTOPLAY,\n                    });\n                }}\n            />\n            <div className=\"hc-score hcs-right\">\n                {props.rightScore}\n            </div>\n        </div>\n    );\n}\n","\nimport React, {\n    useReducer,\n    useCallback,\n    useEffect,\n    useRef,\n} from 'react';\nimport PreloaderComponent from './components/preloader';\nimport DeckComponent from './components/deck';\nimport TableComponent from './components/table';\nimport WrapComponent from './components/wrap';\nimport OverlayComponent from './components/overlay';\nimport HeaderComponent from './components/header';\nimport DeckModel from './models/Deck';\nimport {\n    initialAppState,\n    actions,\n    reducer,\n} from './store';\nimport {\n    CardRect,\n    SideEnum,\n    WinnerEnum,\n    ColorEnum,\n} from './types';\nimport './style.css';\n\nconst FINISH_ROUND_TIME = 1000;\nconst leftDeckColor = ColorEnum.green;\nconst rightDeckColor = ColorEnum.red;\n\nexport default function Canvas() {\n    const leftDeck = useRef(new DeckModel(leftDeckColor));\n    const rightDeck = useRef(new DeckModel(rightDeckColor));\n    const [state, dispatch] = useReducer(reducer, initialAppState);\n    const {\n        leftSide,\n        leftScore,\n        rightSide,\n        rightScore,\n        roundWinner,\n        fullAutoPlay,\n        cardsRevealed,\n        gameOver,\n    } = state;\n\n    const cardChooseHandler = useCallback((side: SideEnum, cardId: string, cardRect: CardRect) => {\n        if (side === SideEnum.left) {\n            const card = leftDeck.current.pullCardById(cardId);\n            if (card) {\n                dispatch({\n                    type: actions.SET_LEFT_SIDE_SELECTION,\n                    payload: {\n                        card,\n                        rect: cardRect,\n                    },\n                });\n            }\n        } else {\n            const card = rightDeck.current.pullCardById(cardId);\n            if (card) {\n                dispatch({\n                    type: actions.SET_RIGHT_SIDE_SELECTION,\n                    payload: {\n                        card,\n                        rect: cardRect,\n                    },\n                });\n            }\n        }\n    }, []);\n\n    const setScore = useCallback((winner: WinnerEnum) => {\n        switch (winner) {\n            case WinnerEnum.left:\n                dispatch({\n                    type: actions.INCREASE_LEFT_SCORE,\n                });\n                break;\n            case WinnerEnum.right:\n                dispatch({\n                    type: actions.INCREASE_RIGHT_SCORE,\n                });\n                break;\n            default:\n        }\n\n        dispatch({\n            type: actions.SET_ROUND_WINNER,\n        });\n    }, []);\n\n    const restart = useCallback(() => {\n        dispatch({\n            type: actions.RESTART,\n        });\n        leftDeck.current.collect();\n        rightDeck.current.collect();\n    }, []);\n\n    useEffect(() => {\n        const finishRoundTimer = setTimeout(() => {\n            if (leftSide.card && rightSide.card) {\n                let winner: WinnerEnum | undefined;\n                if (leftSide.card.rank > rightSide.card.rank) {\n                    winner = WinnerEnum.left;\n                } else if (leftSide.card.rank < rightSide.card.rank) {\n                    winner = WinnerEnum.right;\n                } else {\n                    winner = WinnerEnum.draw;\n                }\n                dispatch({\n                    type: actions.SET_ROUND_WINNER,\n                    payload: winner,\n                });\n            }\n        }, FINISH_ROUND_TIME);\n        return () => clearTimeout(finishRoundTimer);\n    }, [leftSide.card, rightSide.card, leftScore, rightScore]);\n\n    useEffect(() => {\n        if (\n            !roundWinner\n            && leftDeck.current.cardsInDeck.length === 0\n            && rightDeck.current.cardsInDeck.length === 0\n        ) {\n            dispatch({\n                type: actions.SET_GAME_OVER,\n            });\n        }\n    }, [roundWinner]);\n\n    if (!state.cardsPreloaded) {\n        return (\n            <WrapComponent className=\"app-container\">\n                <PreloaderComponent\n                    colors={[leftDeckColor, rightDeckColor]}\n                    onLoading={() => dispatch({\n                        type: actions.SET_CARDS_PRELOADED,\n                        payload: true\n                    })}\n                />\n            </WrapComponent>\n        );\n    }\n\n    let gameOverText = '';\n    if (gameOver) {\n        let winner;\n        let winnerScore;\n        if (leftScore > rightScore) {\n            winner = WinnerEnum.left;\n            winnerScore = leftScore;\n        } else if (leftScore < rightScore) {\n            winner = WinnerEnum.right;\n            winnerScore = rightScore;\n        }\n\n        if (winner) {\n            gameOverText = `${winner} player wins with score ${winnerScore}`;\n        } else {\n            gameOverText = 'The game ended in a draw';\n        }\n    }\n\n    return (\n        <WrapComponent className=\"app-container\">\n            <HeaderComponent\n                leftScore={leftScore}\n                rightScore={rightScore}\n                dispatch={dispatch}\n            />\n            <DeckComponent\n                autoPlay={fullAutoPlay}\n                revealed={cardsRevealed}\n                side={SideEnum.left}\n                disabled={!!leftSide.card}\n                list={leftDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            <TableComponent\n                leftSide={leftSide}\n                rightSide={rightSide}\n                onClear={setScore}\n                roundWinner={roundWinner}\n            />\n            <DeckComponent\n                autoPlay\n                side={SideEnum.right}\n                disabled={!!rightSide.card}\n                list={rightDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            { gameOver && (\n                <OverlayComponent\n                    title=\"Game Over\"\n                    text={gameOverText}\n                    buttonText=\"Restart\"\n                    onClick={restart}\n                />\n            ) }\n        </WrapComponent>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}