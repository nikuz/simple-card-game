{"version":3,"sources":["types/index.ts","components/loading/loading.svg","components/loading/Loading.tsx","models/Card.ts","constants/index.ts","utils/index.ts","models/Deck.ts","components/preloader/Preloader.tsx","components/card/Card.tsx","components/deck/Deck.tsx","components/table/Table.tsx","components/wrap/Wrap.tsx","components/button/Button.tsx","components/overlay/Overlay.tsx","components/switch/Switch.tsx","components/header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ColorEnum","SideEnum","WinnerEnum","SizeEnum","Loading","props","className","cl","small","size","big","src","loadingIcon","alt","Card","rank","rankId","id","front","back","color","this","appParams","name","SCREEN_BASE_HEIGHT","SCREEN_MIN_ASPECT_RATIO","dWidth","window","innerWidth","dHeight","innerHeight","addEventListener","fromRemToPx","sizeInRems","Math","min","ranks","suits","Deck","cards","cardsInDeck","shuffle","array","i","copy","n","length","floor","random","push","arrayShuffle","pullCardByIndex","index","splice","pullCardById","cardIndex","findIndex","item","collect","l","j","jl","Preloader","colors","onLoading","firstDeck","useRef","DeckModel","secondDeck","cardsList","current","useState","loadingCounter","setLoadingCounter","totalCardsAmount","useEffect","imageLoadingHandler","useCallback","progress","round","map","card","PreloaderCard","onLoad","onError","cardClassName","flexible","open","autoPlayCard","autoPlay","disabled","list","side","containerClassName","cardMargin","padding","parseInt","property","element","result","document","documentElement","styles","getComputedStyle","forEach","getPropertyValue","getCssProperty","DeckCard","revealed","position","onClick","rect","onCardChoose","clickHandler","el","left","offsetLeft","right","top","offsetTop","width","offsetWidth","height","offsetHeight","autoSelectFrame","setTimeout","clearTimeout","ref","style","transform","Table","leftSide","rightSide","roundWinner","onClear","container","refreshTableTimer","TableCard","wrapper","zIndex","firstAttack","React","cardRect","CSSTransition","in","nodeRef","unmountOnExit","timeout","classNames","Wrap","containerEl","useLayoutEffect","resizeHandler","curAspectRatio","Object","keys","setProperty","fontSize","setContainerSize","removeEventListener","children","Button","type","text","Overlay","ReactDOM","createPortal","title","buttonText","body","Switch","onChange","e","target","checked","Header","leftScore","onChangeRevealCards","onChangeAutoPlay","rightScore","emptySelection","Canvas","leftDeckColor","green","rightDeckColor","red","leftDeck","rightDeck","cardsPreloaded","setCardsPreloaded","setLeftSideSelection","setLeftScore","setRightSideSelection","setRightScore","setFirstAttack","setRoundWinner","fullAutoPlay","setFullAutoPlay","cardsRevealed","setCardsRevealed","gameOver","setGameOver","cardChooseHandler","cardId","setScore","winner","undefined","restart","finishRoundTimer","draw","winnerScore","gameOverText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.241d2781.chunk.js","sourcesContent":["\nimport CardModel from '../models/Card';\n\nexport enum ColorEnum {\n    red = 'red',\n    green = 'green',\n    blue = 'blue',\n    yellow = 'yellow',\n    gray = 'gray',\n    purple = 'purple',\n}\n\nexport enum SideEnum {\n    left = 'left',\n    right = 'right',\n}\n\nexport type CardRect = {\n    top: number,\n    left: number,\n    width: number,\n    height: number,\n};\n\nexport type SideSelection = {\n    card?: CardModel,\n    rect?: CardRect,\n};\n\nexport enum WinnerEnum {\n    left = 'left',\n    right = 'right',\n    draw = 'draw',\n}\n\nexport enum SizeEnum {\n    small = 'small',\n    big = 'big',\n    flexible = 'flexible',\n}","export default __webpack_public_path__ + \"static/media/loading.4f271669.svg\";","// @flow\n\nimport React from 'react';\nimport cl from 'classnames';\nimport loadingIcon from './loading.svg';\nimport { SizeEnum } from '../../types';\nimport './style.css';\n\ninterface Props {\n    size?: string,\n    className?: string | { [className: string]: any },\n}\n\nexport default function Loading(props: Props) {\n    const className = cl(\n        'loading-icon',\n        {\n            small: props.size === SizeEnum.small,\n            big: props.size === SizeEnum.big,\n        },\n        props.className\n    );\n\n    return (\n        <img src={loadingIcon} alt=\"\" className={className} />\n    );\n}\n","\nimport appParams from '../../package.json';\nimport { ColorEnum } from '../types';\n\ninterface Props {\n    id: string,\n    rank: number,\n    rankId: string,\n    color: ColorEnum,\n}\n\nexport default class Card {\n    constructor(props: Props) {\n        this.id = props.id;\n        this.rank = props.rank;\n        this.rankId = props.rankId;\n        this.front = `/${appParams.name}/cards/${props.id}.png`;\n        this.back = `/${appParams.name}/cards/${props.color}_back.png`;\n        this.color = props.color;\n    }\n\n    rank: number;\n\n    rankId: string;\n\n    id: string;\n\n    front: string;\n\n    back: string;\n\n    color: ColorEnum;\n}\n","\nexport const SCREEN_BASE_WIDTH = 192; // in rem\nexport const SCREEN_BASE_HEIGHT = 108; // in rem\nexport const SCREEN_MIN_ASPECT_RATIO = 1.777;\nexport const SCREEN_MAX_ASPECT_RATIO = 2;\n","\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n} from '../constants';\n\n// https://bost.ocks.org/mike/shuffle/\nexport function arrayShuffle<T>(array: T[]): T[] {\n    const copy: T[] = [];\n    let n = array.length;\n    let i;\n\n    while (n) {\n        i = Math.floor(Math.random() * array.length);\n        if (i in array) {\n            copy.push(array[i]);\n            delete array[i];\n            n--;\n        }\n    }\n\n    return copy;\n}\n\nexport const getCssProperty = (\n    property: string[],\n    element?: HTMLElement | null\n): string[] => {\n    const result: string[] = [];\n\n    if (!document.documentElement) {\n        return result;\n    }\n\n    const styles = getComputedStyle(element || document.documentElement);\n\n    property.forEach((item: string) => {\n        result.push(styles.getPropertyValue(`--${item}`));\n    });\n\n    return result;\n};\n\nlet dWidth = window.innerWidth;\nlet dHeight = window.innerHeight;\n\nwindow.addEventListener('resize', () => {\n    dWidth = window.innerWidth;\n    dHeight = window.innerHeight;\n});\n\nexport const fromPxToRem = (sizeInPixels: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInPixels / fontSize;\n};\n\nexport const fromRemToPx = (sizeInRems: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInRems * fontSize;\n};\n","\nimport Card from './Card';\nimport { arrayShuffle } from '../utils';\nimport { ColorEnum } from '../types';\n\nconst ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\nconst suits = ['C', 'D', 'H', 'S'];\n\nexport default class Deck {\n    constructor(color: ColorEnum) {\n        for (let i = 0, l = ranks.length; i < l; i++) {\n            for (let j = 0, jl = suits.length; j < jl; j++) {\n                const id = `${ranks[i]}${suits[j]}`;\n                this.cards.push(new Card({\n                    rank: i,\n                    rankId: ranks[i],\n                    id,\n                    color,\n                }));\n            }\n        }\n        this.cardsInDeck = [ ...this.cards ];\n        this.shuffle();\n    }\n\n    cards: Card[] = [];\n\n    cardsInDeck: Card[] = [];\n\n    shuffle = () => {\n        this.cardsInDeck = arrayShuffle(this.cardsInDeck);\n    };\n\n    pullCardByIndex = (index: number): Card | undefined => {\n        if (index < 0 || index > this.cardsInDeck.length) {\n            return;\n        }\n\n        return this.cardsInDeck.splice(index, 1)[0];\n    };\n\n    pullCardById = (id: string): Card | undefined => {\n        const cardIndex = this.cardsInDeck.findIndex((item) => item.id === id);\n\n        if (cardIndex !== -1) {\n            return this.cardsInDeck.splice(cardIndex, 1)[0];\n        }\n\n        return undefined;\n    };\n\n    collect = () => {\n        this.cardsInDeck = [...this.cards];\n        this.shuffle();\n    };\n}","\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport Loading from '../loading';\nimport DeckModel from '../../models/Deck';\nimport CardModel from '../../models/Card';\nimport { ColorEnum } from '../../types';\nimport './style.css';\n\ninterface Props {\n    colors: ColorEnum[],\n    onLoading: () => void,\n}\n\nexport default function Preloader(props: Props) {\n    const {\n        colors,\n        onLoading,\n    } = props;\n    const firstDeck = useRef(new DeckModel(colors[0]));\n    const secondDeck = useRef(new DeckModel(colors[1]));\n    const cardsList = firstDeck.current.cards;\n    const [loadingCounter, setLoadingCounter] = useState(0);\n\n    const totalCardsAmount = cardsList.length + 2;\n\n    useEffect(() => {\n        if (loadingCounter === totalCardsAmount) {\n            onLoading();\n        }\n    }, [loadingCounter, totalCardsAmount, onLoading]);\n\n    const imageLoadingHandler = useCallback(() => {\n        setLoadingCounter(loadingCounter + 1);\n    }, [loadingCounter]);\n\n    const progress = Math.round(loadingCounter / (totalCardsAmount / 100));\n\n    return (\n        <div className=\"preloader-container blocker\">\n            <Loading />\n            <div className=\"pc-progress\">\n                {progress || 0}\n                %\n            </div>\n            <div className=\"preloader-deck\">\n                { cardsList.map((card: CardModel) => (\n                    <PreloaderCard\n                        key={card.id}\n                        src={card.front}\n                        onLoad={imageLoadingHandler}\n                        onError={onLoading}\n                    />\n                )) }\n                <PreloaderCard\n                    src={cardsList[0].back}\n                    onLoad={imageLoadingHandler}\n                    onError={onLoading}\n                />\n                <PreloaderCard\n                    src={secondDeck.current.cards[0].back}\n                    onLoad={imageLoadingHandler}\n                    onError={onLoading}\n                />\n            </div>\n        </div>\n    );\n}\n\ninterface CardProps {\n    src: string,\n    onLoad: () => void,\n    onError: () => void,\n}\n\nfunction PreloaderCard(props: CardProps) {\n    return (\n        <img\n            src={props.src}\n            className=\"pcd-card\"\n            alt=\"\"\n            onLoad={props.onLoad}\n            onError={props.onError}\n        />\n    );\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport { SizeEnum } from '../../types';\nimport './style.css';\n\ninterface Props extends CardModel {\n    size: SizeEnum,\n    open?: boolean,\n}\n\nexport default function Card(props: Props) {\n    if (props.id === '') {\n        return null;\n    }\n\n    const cardClassName = cl('cc-image', {\n        small: props.size === SizeEnum.small,\n        big: props.size === SizeEnum.big,\n        flexible: props.size === SizeEnum.flexible,\n    });\n\n    return (\n        <div className=\"card-container\">\n            <img\n                src={props.open ? props.front : props.back}\n                className={cardClassName}\n                alt=\"\"\n            />\n        </div>\n    );\n}","\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport CardComponent from '../card';\nimport { SCREEN_BASE_HEIGHT } from '../../constants';\nimport {\n    fromRemToPx,\n    getCssProperty,\n} from '../../utils';\nimport {\n    SideEnum,\n    SizeEnum,\n    CardRect,\n} from '../../types';\nimport './style.css';\n\nconst cardWidth = 10; // in rem\nconst deckHeight = (SCREEN_BASE_HEIGHT - cardWidth); // in rem\n\ninterface Props {\n    autoPlay?: boolean,\n    side: SideEnum,\n    disabled: boolean,\n    revealed?: boolean,\n    list: CardModel[],\n    onCardChoose: (side: SideEnum, cardId: string, rect: CardRect) => void,\n}\n\nexport default function Deck(props: Props) {\n    const {\n        autoPlay,\n        disabled,\n        list,\n        side,\n    } = props;\n\n    const containerClassName = cl('deck-container', `dc-${side}`, {\n        disabled,\n    });\n\n    const cardMargin = deckHeight / (list.length - 1);\n    let padding = parseInt(getCssProperty(['hover-padding'])[0],10);\n\n    let autoPlayCard: number;\n    if (autoPlay && !disabled) {\n        autoPlayCard = Math.floor(Math.random() * list.length);\n    }\n\n    return (\n        <div className={containerClassName}>\n            {list.map((card: CardModel, i) => (\n                <DeckCard\n                    key={card.id}\n                    side={side}\n                    card={card}\n                    autoPlay={i === autoPlayCard}\n                    revealed={props.revealed}\n                    disabled={disabled}\n                    position={i * cardMargin}\n                    padding={padding || 0}\n                    onClick={(rect: CardRect) => {\n                        props.onCardChoose(side, card.id, rect);\n                    }}\n                />\n            ))}\n            { disabled && <div className=\"blocker\" /> }\n        </div>\n    );\n}\n\ninterface DeckCardProps {\n    side: SideEnum,\n    card: CardModel,\n    autoPlay: boolean,\n    revealed?: boolean,\n    disabled: boolean,\n    position: number,\n    padding: number,\n    onClick: (rect: CardRect) => any,\n}\n\nfunction DeckCard(props: DeckCardProps) {\n    const {\n        autoPlay,\n        revealed,\n        disabled,\n        onClick,\n        padding,\n        side,\n    } = props;\n    const element = useRef<HTMLDivElement>(null);\n    const translateY = 2.65;\n\n    const clickHandler = useCallback(() => {\n        if (element.current !== null) {\n            const el = element.current;\n            let left = el.offsetLeft;\n\n            if (side === SideEnum.right) {\n                left -= fromRemToPx(padding);\n            }\n\n            const rect: CardRect = {\n                top: el.offsetTop - fromRemToPx(translateY),\n                left,\n                width: el.offsetWidth,\n                height: el.offsetHeight,\n            };\n            onClick(rect);\n        }\n    }, [element, padding, side, onClick]);\n\n    useEffect(() => {\n        const autoSelectFrame = setTimeout(() => {\n            if (autoPlay && !disabled) {\n                clickHandler();\n            }\n        }, 10);\n        return () => clearTimeout(autoSelectFrame);\n    }, [autoPlay, disabled, clickHandler]);\n\n    return (\n        <div\n            ref={element}\n            className=\"dc-item\"\n            style={{\n                top: `${props.position}rem`,\n                transform: `translate(-50%, -${translateY}rem) rotate(-90deg)`,\n            }}\n            onClick={() => {\n                if (!autoPlay) {\n                    clickHandler();\n                }\n            }}\n        >\n            <CardComponent\n                {...props.card}\n                open={revealed}\n                size={SizeEnum.small}\n            />\n        </div>\n    );\n}","import React, {useEffect, useRef} from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport cl from 'classnames';\nimport CardComponent from '../card/Card';\nimport CardModel from '../../models/Card';\nimport {\n    SideSelection,\n    SideEnum,\n    SizeEnum,\n    CardRect,\n    WinnerEnum,\n} from '../../types';\nimport './style.css';\n\nconst REFRESH_TABLE_TIME = 500;\n\ninterface Props {\n    leftSide: SideSelection,\n    rightSide: SideSelection,\n    firstAttack?: SideEnum,\n    roundWinner?: WinnerEnum,\n    onClear: (roundWinner: WinnerEnum) => void,\n}\n\nexport default function Table(props: Props) {\n    const {\n        leftSide,\n        rightSide,\n        roundWinner,\n        onClear,\n    } = props;\n    const container = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const refreshTableTimer = setTimeout(() => {\n            if (roundWinner) {\n                onClear(roundWinner); // eslint-disable-line react-hooks/exhaustive-deps\n            }\n        }, REFRESH_TABLE_TIME);\n        return () => clearTimeout(refreshTableTimer);\n    }, [roundWinner, onClear]);\n\n    return (\n        <div className=\"table-container\" ref={container}>\n            <TableCard\n                side={SideEnum.left}\n                card={leftSide.card}\n                rect={leftSide.rect}\n                wrapper={container.current}\n                zIndex={props.firstAttack === SideEnum.left ? 1 : 2}\n                roundWinner={roundWinner}\n            />\n            <TableCard\n                side={SideEnum.right}\n                card={rightSide.card}\n                rect={rightSide.rect}\n                wrapper={container.current}\n                zIndex={props.firstAttack === SideEnum.right ? 1 : 2}\n                roundWinner={roundWinner}\n            />\n        </div>\n    );\n}\n\ninterface TableCardProps {\n    side: SideEnum,\n    card?: CardModel,\n    rect?: CardRect,\n    wrapper: HTMLDivElement | null,\n    zIndex: number,\n    roundWinner?: WinnerEnum,\n}\n\nfunction TableCard(props: TableCardProps) {\n    const container = React.useRef(null);\n    const {\n        side,\n        card,\n        wrapper,\n        roundWinner,\n    } = props;\n\n    const cardRect = props.rect;\n    let rect = {};\n    if (cardRect && wrapper !== null) {\n        let left = cardRect.left;\n        if (side === SideEnum.left) {\n            left -= wrapper.offsetLeft;\n        } else if (side === SideEnum.right) {\n            left += wrapper.offsetWidth;\n        }\n        rect = {\n            top: cardRect.top - wrapper.offsetTop,\n            left,\n            width: cardRect.width,\n            height: cardRect.height,\n        };\n    }\n\n    const className = cl('tc-card-container', {\n        [`tc-${side}-card`]: side,\n        [`tc-winner-${roundWinner}`]: roundWinner,\n    });\n\n    return (\n        <CSSTransition\n            in={card && !roundWinner}\n            nodeRef={container}\n            unmountOnExit\n            timeout={REFRESH_TABLE_TIME}\n            classNames=\"tccc-wrapper\"\n        >\n            <div\n                ref={container}\n                className={className}\n                style={{\n                    ...rect,\n                    zIndex: props.zIndex,\n                }}\n            >\n                <div className=\"tccc-inner\">\n                    <div className=\"rccc-front\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                size={SizeEnum.flexible}\n                            />\n                        )}\n                    </div>\n                    <div className=\"rccc-back\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                open\n                                size={SizeEnum.flexible}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </CSSTransition>\n    );\n}","\nimport React, { useRef, useLayoutEffect } from 'react';\nimport cl from 'classnames';\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n    SCREEN_MIN_ASPECT_RATIO,\n    SCREEN_MAX_ASPECT_RATIO,\n} from '../../constants';\nimport './style.css';\n\nconst setContainerSize = (el: HTMLDivElement | null) => {\n    const documentElement = document.documentElement;\n    if (!el || !documentElement) {\n        return;\n    }\n\n    const dWidth = window.innerWidth;\n    const dHeight = window.innerHeight;\n    const curAspectRatio = dWidth / dHeight;\n    const style = {\n        width: dWidth,\n        height: dHeight,\n    };\n    if (curAspectRatio < SCREEN_MIN_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MIN_ASPECT_RATIO;\n    } else if (curAspectRatio > SCREEN_MAX_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MAX_ASPECT_RATIO;\n    }\n\n    if (style.width > dWidth) {\n        style.width = dWidth;\n        style.height = dWidth / SCREEN_MIN_ASPECT_RATIO;\n    }\n\n    Object.keys(style).forEach((item) => {\n        if (item === 'width' || item === 'height') {\n            el.style.setProperty(item, `${style[item]}px`);\n        }\n    });\n\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n    documentElement.style.fontSize = `${fontSize}px`;\n};\n\ninterface Props {\n    className?: string | { [className: string]: any },\n    children: React.ReactNode,\n}\n\nexport default function Wrap(props: Props) {\n    const containerEl = useRef(null);\n    const className = cl('resizable-container', props.className);\n\n    useLayoutEffect(() => {\n        const resizeHandler = () => {\n            setContainerSize(containerEl.current);\n        };\n        resizeHandler();\n\n        window.addEventListener('resize', resizeHandler);\n        return () => {\n            window.removeEventListener('resize', resizeHandler);\n        };\n    }, []);\n\n    return (\n        <div\n            ref={containerEl}\n            className={className}\n        >\n            { props.children }\n        </div>\n    );\n}\n","\nimport React from 'react';\nimport cl from 'classnames';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    className?: string | { [className: string]: any },\n    onClick: () => any,\n}\n\nexport default function Button(props: Props) {\n    return (\n        <button\n            type=\"button\"\n            className={cl('button', props.className)}\n            onClick={props.onClick}\n        >\n            {props.text}\n        </button>\n    );\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport WrapComponent from '../wrap';\nimport ButtonComponent from '../button';\nimport './style.css';\n\ninterface Props {\n    title: string,\n    text: string,\n    buttonText: string,\n    onClick: () => any,\n}\n\nexport default function Overlay(props: Props) {\n    return ReactDOM.createPortal(\n        (\n            <WrapComponent className=\"overlay\">\n                <div className=\"blocker\" />\n                <div className=\"overlay-content\">\n                    <h1 className=\"overlay-title\">{props.title}</h1>\n                    <p className=\"overlay-text\">{props.text}</p>\n                    <ButtonComponent text={props.buttonText} onClick={props.onClick} />\n                </div>\n            </WrapComponent>\n        ),\n        document.body\n    );\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    className?: string | { [className: string]: any },\n    onChange: (value: boolean) => void,\n}\n\nexport default function Switch(props: Props) {\n    const className = cl('switch-container', props.className);\n    return (\n        <label className={className}>\n            <div className=\"switch\">\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                        props.onChange(e.target.checked);\n                    }}\n                />\n                <span className=\"slider\" />\n            </div>\n            <p className=\"switch-text\">{props.text}</p>\n        </label>\n    );\n};\n","\nimport React from 'react';\nimport SwitchComponent from '../switch';\nimport './style.css';\n\ninterface Props {\n    leftScore: number,\n    rightScore: number,\n    onChangeAutoPlay: (value: boolean) => void,\n    onChangeRevealCards: (value: boolean) => void,\n}\n\nexport default function Header(props: Props) {\n    return (\n        <div className=\"header-container\">\n            <div className=\"hc-score hcs-left\">\n                {props.leftScore}\n            </div>\n            <SwitchComponent\n                text=\"Reveal cards\"\n                className=\"hc-switch\"\n                onChange={props.onChangeRevealCards}\n            />\n            <SwitchComponent\n                text=\"Autoplay\"\n                className=\"hc-switch\"\n                onChange={props.onChangeAutoPlay}\n            />\n            <div className=\"hc-score hcs-right\">\n                {props.rightScore}\n            </div>\n        </div>\n    );\n}","\nimport React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport PreloaderComponent from './components/preloader';\nimport DeckComponent from './components/deck';\nimport TableComponent from './components/table';\nimport WrapComponent from './components/wrap';\nimport OverlayComponent from './components/overlay';\nimport HeaderComponent from './components/header';\nimport DeckModel from './models/Deck';\nimport {\n    CardRect,\n    SideEnum,\n    SideSelection,\n    WinnerEnum,\n    ColorEnum,\n} from './types';\nimport './style.css';\n\nconst FINISH_ROUND_TIME = 1000;\n\nconst emptySelection: SideSelection = {};\n\nexport default function Canvas() {\n    const leftDeckColor = ColorEnum.green;\n    const rightDeckColor = ColorEnum.red;\n    const leftDeck = useRef(new DeckModel(leftDeckColor));\n    const rightDeck = useRef(new DeckModel(rightDeckColor));\n    const [cardsPreloaded, setCardsPreloaded] = useState(false);\n    const [leftSide, setLeftSideSelection] = useState<SideSelection>(emptySelection);\n    const [leftScore, setLeftScore] = useState(0);\n    const [rightSide, setRightSideSelection] = useState<SideSelection>(emptySelection);\n    const [rightScore, setRightScore] = useState(0);\n    const [firstAttack, setFirstAttack] = useState<SideEnum>();\n    const [roundWinner, setRoundWinner] = useState<WinnerEnum>();\n    const [fullAutoPlay, setFullAutoPlay] = useState(false);\n    const [cardsRevealed, setCardsRevealed] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n\n    const cardChooseHandler = useCallback((side: SideEnum, cardId: string, cardRect: CardRect) => {\n        if (side === SideEnum.left) {\n            const card = leftDeck.current.pullCardById(cardId);\n            if (card) {\n                setLeftSideSelection({\n                    card,\n                    rect: cardRect,\n                });\n                if (!rightSide.card) {\n                    setFirstAttack(SideEnum.left);\n                }\n            }\n        } else {\n            const card = rightDeck.current.pullCardById(cardId);\n            if (card) {\n                setRightSideSelection({\n                    card,\n                    rect: cardRect,\n                });\n                if (!leftSide.card) {\n                    setFirstAttack(SideEnum.right);\n                }\n            }\n        }\n    }, [leftSide.card, rightSide.card]);\n\n    const setScore = useCallback((winner: WinnerEnum) => {\n        switch (winner) {\n            case WinnerEnum.left:\n                setLeftScore(leftScore + 1);\n                break;\n            case WinnerEnum.right:\n                setRightScore(rightScore + 1);\n                break;\n            default:\n        }\n\n        setRoundWinner(undefined);\n        setLeftSideSelection(emptySelection);\n        setRightSideSelection(emptySelection);\n    }, [leftScore, rightScore]);\n\n    const restart = useCallback(() => {\n        leftDeck.current.collect();\n        rightDeck.current.collect();\n        setLeftScore(0);\n        setRightScore(0);\n        setGameOver(false);\n    }, []);\n\n    useEffect(() => {\n        const finishRoundTimer = setTimeout(() => {\n            if (leftSide.card && rightSide.card) {\n                let winner: WinnerEnum | undefined;\n                if (leftSide.card.rank > rightSide.card.rank) {\n                    winner = WinnerEnum.left;\n                } else if (leftSide.card.rank < rightSide.card.rank) {\n                    winner = WinnerEnum.right;\n                } else {\n                    winner = WinnerEnum.draw;\n                }\n                setRoundWinner(winner);\n            }\n        }, FINISH_ROUND_TIME);\n        return () => clearTimeout(finishRoundTimer);\n    }, [leftSide.card, rightSide.card, leftScore, rightScore]);\n\n    useEffect(() => {\n        if (\n            !roundWinner\n            && leftDeck.current.cardsInDeck.length === 0\n            && rightDeck.current.cardsInDeck.length === 0\n        ) {\n            setGameOver(true);\n        }\n    }, [roundWinner]);\n\n    if (!cardsPreloaded) {\n        return (\n            <WrapComponent className=\"app-container\">\n                <PreloaderComponent\n                    colors={[leftDeckColor, rightDeckColor]}\n                    onLoading={() => setCardsPreloaded(true)}\n                />\n            </WrapComponent>\n        );\n    }\n\n    let gameOverText = '';\n    if (gameOver) {\n        let winner;\n        let winnerScore;\n        if (leftScore > rightScore) {\n            winner = WinnerEnum.left;\n            winnerScore = leftScore;\n        } else if (leftScore < rightScore) {\n            winner = WinnerEnum.right;\n            winnerScore = rightScore;\n        }\n\n        if (winner) {\n            gameOverText = `${winner} player wins with score ${winnerScore}`;\n        } else {\n            gameOverText = 'The game ended in a draw';\n        }\n    }\n\n    return (\n        <WrapComponent className=\"app-container\">\n            <HeaderComponent\n                leftScore={leftScore}\n                rightScore={rightScore}\n                onChangeAutoPlay={setFullAutoPlay}\n                onChangeRevealCards={setCardsRevealed}\n            />\n            <DeckComponent\n                autoPlay={fullAutoPlay}\n                revealed={cardsRevealed}\n                side={SideEnum.left}\n                disabled={!!leftSide.card}\n                list={leftDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            <TableComponent\n                leftSide={leftSide}\n                rightSide={rightSide}\n                firstAttack={firstAttack}\n                onClear={setScore}\n                roundWinner={roundWinner}\n            />\n            <DeckComponent\n                autoPlay\n                side={SideEnum.right}\n                disabled={!!rightSide.card}\n                list={rightDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            { gameOver && (\n                <OverlayComponent\n                    title=\"Game Over\"\n                    text={gameOverText}\n                    buttonText=\"Restart\"\n                    onClick={restart}\n                />\n            ) }\n        </WrapComponent>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}