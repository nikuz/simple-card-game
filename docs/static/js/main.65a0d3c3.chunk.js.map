{"version":3,"sources":["components/card/Card.tsx","constants/index.ts","utils/index.ts","components/deck/Deck.tsx","components/table/Table.tsx","components/wrap/Wrap.tsx","components/button/Button.tsx","components/overlay/Overlay.tsx","components/switch/Switch.tsx","components/header/Header.tsx","models/Card.ts","models/Deck.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","id","cardClassName","cl","small","size","big","flexible","className","src","open","front","back","alt","SCREEN_BASE_HEIGHT","SCREEN_MIN_ASPECT_RATIO","dWidth","window","innerWidth","dHeight","innerHeight","addEventListener","fromRemToPx","sizeInRems","Math","min","Deck","autoPlayCard","autoPlay","disabled","list","side","containerClassName","cardMargin","length","property","result","document","documentElement","styles","getComputedStyle","forEach","item","push","getPropertyValue","getCssProperty","padding","floor","random","map","card","i","DeckCard","revealed","position","parseInt","onClick","rect","onCardChoose","element","useRef","clickHandler","useCallback","current","el","left","offsetLeft","top","offsetTop","width","offsetWidth","height","offsetHeight","useEffect","ref","style","transform","Table","leftSide","rightSide","roundWinner","onClear","container","refreshTableTimer","setInterval","clearInterval","TableCard","wrapper","zIndex","firstAttack","React","cardRect","CSSTransition","in","nodeRef","unmountOnExit","timeout","classNames","Wrap","containerEl","useLayoutEffect","resizeHandler","curAspectRatio","Object","keys","setProperty","fontSize","setContainerSize","removeEventListener","children","Button","type","text","Overlay","ReactDOM","createPortal","title","buttonText","body","Switch","onChange","e","target","checked","Header","leftScore","onChangeRevealCards","onChangeAutoPlay","rightScore","rank","rankId","color","this","ranks","suits","cards","cardsInDeck","shuffle","array","copy","n","arrayShuffle","pullCardByIndex","index","splice","pullCardById","cardIndex","findIndex","collect","l","j","jl","emptySelection","App","leftDeck","DeckModel","rightDeck","useState","setLeftSideSelection","setLeftScore","setRightSideSelection","setRightScore","setFirstAttack","setRoundWinner","fullAutoPlay","setFullAutoPlay","cardsRevealed","setCardsRevealed","gameOver","setGameOver","cardChooseHandler","cardId","setScore","winner","undefined","restart","finishRoundTimer","winnerScore","gameOverText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.65a0d3c3.chunk.js","sourcesContent":["\nimport React from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport './style.css';\n\ninterface Props extends CardModel {\n    size: 'small' | 'big' | 'flexible',\n    open?: boolean,\n}\n\nexport default function Card(props: Props) {\n    if (props.id === '') {\n        return null;\n    }\n\n    const cardClassName = cl('cc-image', {\n        small: props.size === 'small',\n        big: props.size === 'big',\n        flexible: props.size === 'flexible',\n    });\n\n    return (\n        <div className=\"card-container\">\n            <img\n                src={props.open ? props.front : props.back}\n                className={cardClassName}\n                alt=\"\"\n            />\n        </div>\n    );\n}","\nexport const SCREEN_BASE_WIDTH = 192; // in rem\nexport const SCREEN_BASE_HEIGHT = 108; // in rem\nexport const SCREEN_MIN_ASPECT_RATIO = 1.777;\nexport const SCREEN_MAX_ASPECT_RATIO = 2;\n","\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n} from '../constants';\n\n// https://bost.ocks.org/mike/shuffle/\nexport function arrayShuffle<T>(array: T[]): T[] {\n    const copy: T[] = [];\n    let n = array.length\n    let i;\n\n    while (n) {\n        i = Math.floor(Math.random() * array.length);\n        if (i in array) {\n            copy.push(array[i]);\n            delete array[i];\n            n--;\n        }\n    }\n\n    return copy;\n}\n\nexport const getCssProperty = (property: string[]): string[] => {\n    const result: string[] = [];\n\n    if (!document.documentElement) {\n        return result;\n    }\n\n    const styles = getComputedStyle(document.documentElement);\n\n    property.forEach((item: string) => {\n        result.push(styles.getPropertyValue(`--${item}`));\n    });\n\n    return result;\n};\n\nlet dWidth = window.innerWidth;\nlet dHeight = window.innerHeight;\n\nwindow.addEventListener('resize', () => {\n    dWidth = window.innerWidth;\n    dHeight = window.innerHeight;\n});\n\nexport const fromPxToRem = (sizeInPixels: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInPixels / fontSize;\n};\n\nexport const fromRemToPx = (sizeInRems: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInRems * fontSize;\n};\n","\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport CardComponent from '../card';\nimport { SCREEN_BASE_HEIGHT } from '../../constants';\nimport {\n    fromRemToPx,\n    getCssProperty,\n} from '../../utils';\nimport type {\n    Side,\n    CardRect,\n} from '../../types';\nimport './style.css';\n\nconst cardWidth = 10; // in rem\nconst deckHeight = (SCREEN_BASE_HEIGHT - cardWidth); // in rem\n\ninterface Props {\n    autoPlay?: boolean,\n    side: Side,\n    disabled: boolean,\n    revealed?: boolean,\n    list: CardModel[],\n    onCardChoose: (side: Side, cardId: string, rect: CardRect) => void,\n}\n\nexport default function Deck(props: Props) {\n    const {\n        autoPlay,\n        disabled,\n        list,\n        side,\n    } = props;\n\n    const containerClassName = cl('deck-container', `dc-${side}`, {\n        disabled,\n    });\n\n    const cardMargin = deckHeight / (list.length - 1);\n    const [padding] = getCssProperty(['hover-padding']);\n\n    let autoPlayCard: number;\n    if (autoPlay && !disabled) {\n        autoPlayCard = Math.floor(Math.random() * list.length);\n    }\n\n    return (\n        <div className={containerClassName}>\n            {list.map((card: CardModel, i) => (\n                <DeckCard\n                    key={card.id}\n                    side={side}\n                    card={card}\n                    autoPlay={i === autoPlayCard}\n                    revealed={props.revealed}\n                    disabled={disabled}\n                    position={i * cardMargin}\n                    padding={parseInt(padding, 10)}\n                    onClick={(rect: CardRect) => {\n                        props.onCardChoose(side, card.id, rect);\n                    }}\n                />\n            ))}\n            { disabled && <div className=\"blocker\" /> }\n        </div>\n    );\n}\n\ninterface DeckCardProps {\n    side: Side,\n    card: CardModel,\n    autoPlay: boolean,\n    revealed?: boolean,\n    disabled: boolean,\n    position: number,\n    padding: number,\n    onClick: (rect: CardRect) => any,\n}\n\nfunction DeckCard(props: DeckCardProps) {\n    const {\n        autoPlay,\n        revealed,\n        disabled,\n        onClick,\n        padding,\n        side,\n    } = props;\n    const element = useRef<HTMLDivElement>(null);\n    const translateY = 2.65;\n\n    const clickHandler = useCallback(() => {\n        if (element.current !== null) {\n            const el = element.current;\n            let left = el.offsetLeft;\n\n            if (side === 'right') {\n                left -= fromRemToPx(padding);\n            }\n\n            const rect: CardRect = {\n                top: el.offsetTop - fromRemToPx(translateY),\n                left,\n                width: el.offsetWidth,\n                height: el.offsetHeight,\n            };\n            onClick(rect);\n        }\n    }, [element, padding, side, onClick]);\n\n    useEffect(() => {\n        if (autoPlay && !disabled) {\n            clickHandler();\n        }\n    }, [autoPlay, disabled, clickHandler]);\n\n    return (\n        <div\n            ref={element}\n            className=\"dc-item\"\n            style={{\n                top: `${props.position}rem`,\n                transform: `translate(-50%, -${translateY}rem) rotate(-90deg)`,\n            }}\n            onClick={() => {\n                if (!autoPlay) {\n                    clickHandler();\n                }\n            }}\n        >\n            <CardComponent\n                {...props.card}\n                open={revealed}\n                size=\"small\"\n            />\n        </div>\n    );\n}","\nimport React, { useRef, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport cl from 'classnames';\nimport CardComponent from '../card/Card';\nimport CardModel from '../../models/Card';\nimport {\n    SideSelection,\n    Side,\n    CardRect,\n    Winner,\n} from '../../types';\nimport './style.css';\n\nconst REFRESH_TABLE_TIME = 500;\n\ninterface Props {\n    leftSide: SideSelection,\n    rightSide: SideSelection,\n    firstAttack?: Side,\n    roundWinner?: Winner,\n    onClear: (roundWinner: Winner) => void,\n}\n\nexport default function Table(props: Props) {\n    const {\n        leftSide,\n        rightSide,\n        roundWinner,\n        onClear,\n    } = props;\n    const container = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const refreshTableTimer = setInterval(() => {\n            if (roundWinner) {\n                onClear(roundWinner); // eslint-disable-line react-hooks/exhaustive-deps\n            }\n        }, REFRESH_TABLE_TIME);\n        return () => clearInterval(refreshTableTimer);\n    }, [roundWinner, onClear]);\n\n    return (\n        <div className=\"table-container\" ref={container}>\n            <TableCard\n                side=\"left\"\n                card={leftSide.card}\n                rect={leftSide.rect}\n                wrapper={container.current}\n                zIndex={props.firstAttack === 'left' ? 1 : 2}\n                roundWinner={roundWinner}\n            />\n            <TableCard\n                side=\"right\"\n                card={rightSide.card}\n                rect={rightSide.rect}\n                wrapper={container.current}\n                zIndex={props.firstAttack === 'right' ? 1 : 2}\n                roundWinner={roundWinner}\n            />\n        </div>\n    );\n}\n\ninterface TableCardProps {\n    side: Side,\n    card?: CardModel,\n    rect?: CardRect,\n    wrapper: HTMLDivElement | null,\n    zIndex: number,\n    roundWinner?: Winner,\n}\n\nfunction TableCard(props: TableCardProps) {\n    const container = React.useRef(null);\n    const {\n        side,\n        card,\n        wrapper,\n        roundWinner,\n    } = props;\n\n    const cardRect = props.rect;\n    let rect = {};\n    if (cardRect && wrapper !== null) {\n        let left = cardRect.left;\n        if (side === 'left') {\n            left -= wrapper.offsetLeft;\n        } else if (side === 'right') {\n            left += wrapper.offsetWidth;\n        }\n        rect = {\n            top: cardRect.top - wrapper.offsetTop,\n            left,\n            width: cardRect.width,\n            height: cardRect.height,\n        };\n    }\n\n    const className = cl('tc-card-container', {\n        [`tc-${side}-card`]: side,\n        [`tc-winner-${roundWinner}`]: roundWinner,\n    });\n\n    return (\n        <CSSTransition\n            in={card && !roundWinner}\n            nodeRef={container}\n            unmountOnExit\n            timeout={500}\n            classNames=\"tccc-wrapper\"\n        >\n            <div\n                ref={container}\n                className={className}\n                style={{\n                    ...rect,\n                    zIndex: props.zIndex,\n                }}\n            >\n                <div className=\"tccc-inner\">\n                    <div className=\"rccc-front\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                size=\"flexible\"\n                            />\n                        )}\n                    </div>\n                    <div className=\"rccc-back\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                open\n                                size=\"flexible\"\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </CSSTransition>\n    );\n}","\nimport React, { useRef, useLayoutEffect } from 'react';\nimport cl from 'classnames';\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n    SCREEN_MIN_ASPECT_RATIO,\n    SCREEN_MAX_ASPECT_RATIO,\n} from '../../constants';\nimport './style.css';\n\nconst setContainerSize = (el: HTMLDivElement | null) => {\n    const documentElement = document.documentElement;\n    if (!el || !documentElement) {\n        return;\n    }\n\n    const dWidth = window.innerWidth;\n    const dHeight = window.innerHeight;\n    const curAspectRatio = dWidth / dHeight;\n    const style = {\n        width: dWidth,\n        height: dHeight,\n    };\n    if (curAspectRatio < SCREEN_MIN_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MIN_ASPECT_RATIO;\n    } else if (curAspectRatio > SCREEN_MAX_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MAX_ASPECT_RATIO;\n    }\n\n    if (style.width > dWidth) {\n        style.width = dWidth;\n        style.height = dWidth / SCREEN_MIN_ASPECT_RATIO;\n    }\n\n    Object.keys(style).forEach((item) => {\n        if (item === 'width' || item === 'height') {\n            el.style.setProperty(item, `${style[item]}px`);\n        }\n    });\n\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n    documentElement.style.fontSize = `${fontSize}px`;\n};\n\ninterface Props {\n    className?: string | { [className: string]: any },\n    children: React.ReactNode,\n}\n\nexport default function Wrap(props: Props) {\n    const containerEl = useRef(null);\n    const className = cl('resizable-container', props.className);\n\n    useLayoutEffect(() => {\n        const resizeHandler = () => {\n            setContainerSize(containerEl.current);\n        };\n        resizeHandler();\n\n        window.addEventListener('resize', resizeHandler);\n        return () => {\n            window.removeEventListener('resize', resizeHandler);\n        };\n    }, []);\n\n    return (\n        <div\n            ref={containerEl}\n            className={className}\n        >\n            { props.children }\n        </div>\n    );\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    className?: string | { [className: string]: any },\n    onClick: () => any,\n}\n\nexport default function Button(props: Props) {\n    return (\n        <button\n            type=\"button\"\n            className={cl('button', props.className)}\n            onClick={props.onClick}\n        >\n            {props.text}\n        </button>\n    );\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport WrapContainer from '../wrap';\nimport ButtonContainer from '../button';\nimport './style.css';\n\ninterface Props {\n    title: string,\n    text: string,\n    buttonText: string,\n    onClick: () => any,\n}\n\nexport default function Overlay(props: Props) {\n    return ReactDOM.createPortal(\n        (\n            <WrapContainer className=\"overlay\">\n                <div className=\"blocker\" />\n                <div className=\"overlay-content\">\n                    <h1 className=\"overlay-title\">{props.title}</h1>\n                    <p className=\"overlay-text\">{props.text}</p>\n                    <ButtonContainer text={props.buttonText} onClick={props.onClick} />\n                </div>\n            </WrapContainer>\n        ),\n        document.body\n    );\n}","\nimport React from 'react';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    onChange: (value: boolean) => void,\n}\n\nexport default function Switch(props: Props) {\n    return (\n        <label className=\"switch-container\">\n            <div className=\"switch\">\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                        props.onChange(e.target.checked);\n                    }}\n                />\n                <span className=\"slider\" />\n            </div>\n            <p className=\"switch-text\">{props.text}</p>\n        </label>\n    );\n};\n","\nimport React from 'react';\nimport SwitchComponent from '../switch';\nimport './style.css';\n\ninterface Props {\n    leftScore: number,\n    rightScore: number,\n    onChangeAutoPlay: (value: boolean) => void,\n    onChangeRevealCards: (value: boolean) => void,\n}\n\nexport default function Header(props: Props) {\n    return (\n        <div className=\"header-container\">\n            <div className=\"hc-score hcs-left\">\n                {props.leftScore}\n            </div>\n            <SwitchComponent\n                text=\"Reveal cards\"\n                onChange={props.onChangeRevealCards}\n            />\n            <SwitchComponent\n                text=\"Autoplay\"\n                onChange={props.onChangeAutoPlay}\n            />\n            <div className=\"hc-score hcs-right\">\n                {props.rightScore}\n            </div>\n        </div>\n    );\n}","\nimport { Color } from '../types';\n\ninterface Props {\n    id: string,\n    rank: number,\n    rankId: string,\n    color: Color,\n}\n\nexport default class Card {\n    constructor(props: Props) {\n        this.id = props.id;\n        this.rank = props.rank;\n        this.rankId = props.rankId;\n        this.front = `/cards/${props.id}.png`;\n        this.back = `/cards/${props.color}_back.png`;\n        this.color = props.color;\n    }\n\n    rank: number;\n\n    rankId: string;\n\n    id: string;\n\n    front: string;\n\n    back: string;\n\n    color: Color;\n}","\nimport Card from './Card';\nimport { arrayShuffle } from '../utils';\nimport { Color } from '../types';\n\nconst ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\nconst suits = ['C', 'D', 'H', 'S'];\n\nexport default class Deck {\n    constructor(color: Color) {\n        for (let i = 0, l = ranks.length; i < l; i++) {\n            for (let j = 0, jl = suits.length; j < jl; j++) {\n                const id = `${ranks[i]}${suits[j]}`;\n                this.cards.push(new Card({\n                    rank: i,\n                    rankId: ranks[i],\n                    id,\n                    color,\n                }));\n            }\n        }\n        this.cardsInDeck = [ ...this.cards ];\n        this.shuffle();\n    }\n\n    cards: Card[] = [];\n\n    cardsInDeck: Card[] = [];\n\n    shuffle = () => {\n        this.cardsInDeck = arrayShuffle(this.cardsInDeck);\n    };\n\n    pullCardByIndex = (index: number): Card | undefined => {\n        if (index < 0 || index > this.cardsInDeck.length) {\n            return;\n        }\n\n        return this.cardsInDeck.splice(index, 1)[0];\n    };\n\n    pullCardById = (id: string): Card | undefined => {\n        const cardIndex = this.cardsInDeck.findIndex(item => item.id === id);\n\n        if (cardIndex !== -1) {\n            return this.cardsInDeck.splice(cardIndex, 1)[0];\n        }\n\n        return undefined;\n    };\n\n    collect = () => {\n        this.cardsInDeck = [ ...this.cards ];\n        this.shuffle();\n    };\n}","\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport DeckComponent from './components/deck';\nimport TableComponent from './components/table';\nimport WrapComponent from './components/wrap';\nimport OverlayComponent from './components/overlay';\nimport HeaderComponent from './components/header';\nimport DeckModel from './models/Deck';\nimport type {\n    SideSelection,\n    Side,\n    CardRect,\n    Winner,\n} from './types';\nimport './style.css';\n\nconst FINISH_ROUND_TIME = 1000;\n\nconst emptySelection: SideSelection = {};\n\nfunction App() {\n    let leftDeck = useRef(new DeckModel('green'));\n    let rightDeck = useRef(new DeckModel('red'));\n    const [leftSide, setLeftSideSelection] = useState<SideSelection>(emptySelection);\n    const [leftScore, setLeftScore] = useState(0);\n    const [rightSide, setRightSideSelection] = useState<SideSelection>(emptySelection);\n    const [rightScore, setRightScore] = useState(0);\n    const [firstAttack, setFirstAttack] = useState<Side>();\n    const [roundWinner, setRoundWinner] = useState<Winner>();\n    const [fullAutoPlay, setFullAutoPlay] = useState(false);\n    const [cardsRevealed, setCardsRevealed] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n\n    const cardChooseHandler = useCallback((side: Side, cardId: string, cardRect: CardRect) => {\n        if (side === 'left') {\n            const card = leftDeck.current.pullCardById(cardId);\n            if (card) {\n                setLeftSideSelection({\n                    card: card,\n                    rect: cardRect,\n                });\n                if (!rightSide.card) {\n                    setFirstAttack('left');\n                }\n            }\n        } else {\n            const card = rightDeck.current.pullCardById(cardId);\n            if (card) {\n                setRightSideSelection({\n                    card: card,\n                    rect: cardRect,\n                });\n                if (!leftSide.card) {\n                    setFirstAttack('right');\n                }\n            }\n        }\n    }, [leftSide.card, rightSide.card]);\n\n    const setScore = useCallback((winner: Winner) => {\n        switch (winner) {\n            case \"left\":\n                setLeftScore(leftScore + 1);\n                break;\n            case \"right\":\n                setRightScore(rightScore + 1);\n                break;\n            default:\n        }\n\n        setRoundWinner(undefined);\n        setLeftSideSelection(emptySelection);\n        setRightSideSelection(emptySelection);\n    }, [leftScore, rightScore]);\n\n    const restart = useCallback(() => {\n        leftDeck.current.collect();\n        rightDeck.current.collect();\n        setLeftScore(0);\n        setRightScore(0);\n        setGameOver(false);\n    }, []);\n\n    useEffect(() => {\n        const finishRoundTimer = setInterval(() => {\n            if (leftSide.card && rightSide.card) {\n                let winner: Winner | undefined;\n                if (leftSide.card.rank > rightSide.card.rank) {\n                    winner = 'left';\n                } else if (leftSide.card.rank < rightSide.card.rank) {\n                    winner = 'right';\n                } else {\n                    winner = 'draw';\n                }\n                setRoundWinner(winner);\n            }\n        }, FINISH_ROUND_TIME);\n        return () => clearInterval(finishRoundTimer);\n    }, [leftSide.card, rightSide.card, leftScore, rightScore]);\n\n    useEffect(() => {\n        if (\n            !roundWinner\n            && leftDeck.current.cardsInDeck.length === 0\n            && rightDeck.current.cardsInDeck.length === 0\n        ) {\n            setGameOver(true);\n        }\n    }, [roundWinner]);\n\n    let gameOverText = '';\n    if (gameOver) {\n        let winner;\n        let winnerScore;\n        if (leftScore > rightScore) {\n            winner = 'left';\n            winnerScore = leftScore;\n        } else if (leftScore < rightScore) {\n            winner = 'right';\n            winnerScore = rightScore;\n        }\n\n        if (winner) {\n            gameOverText = `${winner} player wins with score ${winnerScore}`;\n        } else {\n            gameOverText = `The game ended in a draw`;\n        }\n    }\n\n    return (\n        <WrapComponent className=\"app-container\">\n            <HeaderComponent\n                leftScore={leftScore}\n                rightScore={rightScore}\n                onChangeAutoPlay={setFullAutoPlay}\n                onChangeRevealCards={setCardsRevealed}\n            />\n            <DeckComponent\n                autoPlay={fullAutoPlay}\n                revealed={cardsRevealed}\n                side=\"left\"\n                disabled={!!leftSide.card}\n                list={leftDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            <TableComponent\n                leftSide={leftSide}\n                rightSide={rightSide}\n                firstAttack={firstAttack}\n                onClear={setScore}\n                roundWinner={roundWinner}\n            />\n            <DeckComponent\n                autoPlay\n                side=\"right\"\n                disabled={!!rightSide.card}\n                list={rightDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            { gameOver && (\n                <OverlayComponent\n                    title=\"Game Over\"\n                    text={gameOverText}\n                    buttonText=\"Restart\"\n                    onClick={restart}\n                />\n            ) }\n        </WrapComponent>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}