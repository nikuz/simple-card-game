{"version":3,"sources":["components/loading/loading.svg","components/loading/Loading.tsx","models/Card.ts","constants/index.ts","utils/index.ts","models/Deck.ts","components/preloader/Preloader.tsx","components/card/Card.tsx","components/deck/Deck.tsx","components/table/Table.tsx","components/wrap/Wrap.tsx","components/button/Button.tsx","components/overlay/Overlay.tsx","components/switch/Switch.tsx","components/header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Loading","props","className","cl","small","size","src","loadingIcon","alt","Card","rank","rankId","id","front","back","color","this","appParams","name","SCREEN_BASE_HEIGHT","SCREEN_MIN_ASPECT_RATIO","dWidth","window","innerWidth","dHeight","innerHeight","addEventListener","fromRemToPx","sizeInRems","Math","min","ranks","suits","Deck","cards","cardsInDeck","shuffle","array","i","copy","n","length","floor","random","push","arrayShuffle","pullCardByIndex","index","splice","pullCardById","cardIndex","findIndex","item","collect","l","j","jl","Preloader","onLoading","cardsList","useRef","DeckModel","current","useState","loadingCounter","setLoadingCounter","useEffect","timeoutTimer","setTimeout","clearTimeout","imageLoadingHandler","useCallback","map","card","onLoad","onError","cardClassName","big","flexible","open","autoPlayCard","autoPlay","disabled","list","side","containerClassName","cardMargin","padding","parseInt","property","element","result","document","documentElement","styles","getComputedStyle","forEach","getPropertyValue","getCssProperty","DeckCard","revealed","position","onClick","rect","onCardChoose","clickHandler","el","left","offsetLeft","top","offsetTop","width","offsetWidth","height","offsetHeight","autoSelectFrame","ref","style","transform","Table","leftSide","rightSide","roundWinner","onClear","container","refreshTableTimer","TableCard","wrapper","zIndex","firstAttack","React","cardRect","CSSTransition","in","nodeRef","unmountOnExit","timeout","classNames","Wrap","containerEl","useLayoutEffect","resizeHandler","curAspectRatio","Object","keys","setProperty","fontSize","setContainerSize","removeEventListener","children","Button","type","text","Overlay","ReactDOM","createPortal","title","buttonText","body","Switch","onChange","e","target","checked","Header","leftScore","onChangeRevealCards","onChangeAutoPlay","rightScore","emptySelection","Canvas","leftDeck","rightDeck","cardsPreloaded","setCardsPreloaded","setLeftSideSelection","setLeftScore","setRightSideSelection","setRightScore","setFirstAttack","setRoundWinner","fullAutoPlay","setFullAutoPlay","cardsRevealed","setCardsRevealed","gameOver","setGameOver","cardChooseHandler","cardId","setScore","winner","undefined","restart","finishRoundTimer","winnerScore","gameOverText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"4/CAAe,MAA0B,oC,MCY1B,SAASA,EAAQC,GAC5B,IAAMC,EAAYC,IACd,eACA,CACIC,MAAsB,UAAfH,EAAMI,KACb,IAAsB,QAAfJ,EAAMI,MAEjBJ,EAAMC,WAGV,OACI,qBAAKI,IAAKC,EAAaC,IAAI,GAAGN,UAAWA,I,2BCZ5BO,EACjB,WAAYR,GAAe,yBAS3BS,UAT0B,OAW1BC,YAX0B,OAa1BC,QAb0B,OAe1BC,WAf0B,OAiB1BC,UAjB0B,OAmB1BC,WAnB0B,EACtBC,KAAKJ,GAAKX,EAAMW,GAChBI,KAAKN,KAAOT,EAAMS,KAClBM,KAAKL,OAASV,EAAMU,OACpBK,KAAKH,MAAL,WAAiBI,EAAUC,KAA3B,kBAAyCjB,EAAMW,GAA/C,QACAI,KAAKF,KAAL,WAAgBG,EAAUC,KAA1B,kBAAwCjB,EAAMc,MAA9C,aACAC,KAAKD,MAAQd,EAAMc,OChBdI,EAAqB,IACrBC,EAA0B,MCqBhC,IAmBHC,EAASC,OAAOC,WAChBC,EAAUF,OAAOG,YAErBH,OAAOI,iBAAiB,UAAU,WAC9BL,EAASC,OAAOC,WAChBC,EAAUF,OAAOG,eAGd,IAMME,EAAc,SAACC,GAGxB,OAAOA,EAFUC,KAAKC,IAAKT,EDzDE,ICyD4BG,EAAUL,ICrDjEY,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KACtEC,EAAQ,CAAC,IAAK,IAAK,IAAK,KAETC,EACjB,WAAYlB,GAAe,IAAD,gCAgB1BmB,MAAgB,GAhBU,KAkB1BC,YAAsB,GAlBI,KAoB1BC,QAAU,WACN,EAAKD,YDvBN,SAAyBE,GAK5B,IAJA,IAEIC,EAFEC,EAAY,GACdC,EAAIH,EAAMI,OAGPD,IACHF,EAAIT,KAAKa,MAAMb,KAAKc,SAAWN,EAAMI,WAC5BJ,IACLE,EAAKK,KAAKP,EAAMC,WACTD,EAAMC,GACbE,KAIR,OAAOD,ECSgBM,CAAa,EAAKV,cArBf,KAwB1BW,gBAAkB,SAACC,GACf,KAAIA,EAAQ,GAAKA,EAAQ,EAAKZ,YAAYM,QAI1C,OAAO,EAAKN,YAAYa,OAAOD,EAAO,GAAG,IA7BnB,KAgC1BE,aAAe,SAACrC,GACZ,IAAMsC,EAAY,EAAKf,YAAYgB,WAAU,SAAAC,GAAI,OAAIA,EAAKxC,KAAOA,KAEjE,IAAmB,IAAfsC,EACA,OAAO,EAAKf,YAAYa,OAAOE,EAAW,GAAG,IApC3B,KA0C1BG,QAAU,WACN,EAAKlB,YAAL,YAAwB,EAAKD,OAC7B,EAAKE,WA3CL,IAAK,IAAIE,EAAI,EAAGgB,EAAIvB,EAAMU,OAAQH,EAAIgB,EAAGhB,IACrC,IAAK,IAAIiB,EAAI,EAAGC,EAAKxB,EAAMS,OAAQc,EAAIC,EAAID,IAAK,CAC5C,IAAM3C,EAAE,UAAMmB,EAAMO,IAAZ,OAAiBN,EAAMuB,IAC/BvC,KAAKkB,MAAMU,KAAK,IAAInC,EAAK,CACrBC,KAAM4B,EACN3B,OAAQoB,EAAMO,GACd1B,KACAG,WAIZC,KAAKmB,YAAL,YAAwBnB,KAAKkB,OAC7BlB,KAAKoB,W,MCTE,SAASqB,EAAUxD,GAAe,IACrCyD,EAAczD,EAAdyD,UAEFC,EADOC,iBAAO,IAAIC,EAAU,UACXC,QAAQ5B,MAHa,EAIA6B,mBAAS,GAJT,mBAIrCC,EAJqC,KAIrBC,EAJqB,KAM5CC,qBAAU,WACFF,IAAmBL,EAAUlB,OAAS,GACtCiB,IAEJ,IAAMS,EAAeC,YAAW,WAC5BV,MAjBI,KAmBR,OAAO,kBAAMW,aAAaF,MAC3B,CAACH,EAAgBL,EAAUlB,OAAQiB,IAEtC,IAAMY,EAAsBC,uBAAY,WACpCN,EAAkBD,EAAiB,KACpC,CAACA,IAEJ,OACI,sBAAK9D,UAAU,8BAAf,UACI,cAACF,EAAD,CAASK,KAAK,UACd,qBAAKH,UAAU,iBAAf,SACMyD,EAAUa,KAAI,SAACC,GAAD,OACZ,qBAEInE,IAAKmE,EAAK5D,MACVX,UAAU,WACVM,IAAI,GACJkE,OAAQJ,EACRK,QAASjB,GALJe,EAAK7D,Y,iBC5BnB,SAASH,EAAKR,GACzB,GAAiB,KAAbA,EAAMW,GACN,OAAO,KAGX,IAAMgE,EAAgBzE,IAAG,WAAY,CACjCC,MAAsB,UAAfH,EAAMI,KACbwE,IAAoB,QAAf5E,EAAMI,KACXyE,SAAyB,aAAf7E,EAAMI,OAGpB,OACI,qBAAKH,UAAU,iBAAf,SACI,qBACII,IAAKL,EAAM8E,KAAO9E,EAAMY,MAAQZ,EAAMa,KACtCZ,UAAW0E,EACXpE,IAAI,O,MCCL,SAASyB,EAAKhC,GAAe,IAepC+E,EAbAC,EAIAhF,EAJAgF,SACAC,EAGAjF,EAHAiF,SACAC,EAEAlF,EAFAkF,KACAC,EACAnF,EADAmF,KAGEC,EAAqBlF,IAAG,iBAAD,aAAyBiF,GAAQ,CAC1DF,aAGEI,EAvBUnE,IAuBiBgE,EAAK1C,OAAS,GAC3C8C,EAAUC,SJjBY,SAC1BC,EACAC,GAEA,IAAMC,EAAmB,GAEzB,IAAKC,SAASC,gBACV,OAAOF,EAGX,IAAMG,EAASC,iBAAiBL,GAAWE,SAASC,iBAMpD,OAJAJ,EAASO,SAAQ,SAAC5C,GACduC,EAAO/C,KAAKkD,EAAOG,iBAAP,YAA6B7C,QAGtCuC,EICgBO,CAAe,CAAC,kBAAkB,GAAG,IAO5D,OAJIjB,IAAaC,IACbF,EAAenD,KAAKa,MAAMb,KAAKc,SAAWwC,EAAK1C,SAI/C,sBAAKvC,UAAWmF,EAAhB,UACKF,EAAKX,KAAI,SAACC,EAAiBnC,GAAlB,OACN,cAAC6D,EAAD,CAEIf,KAAMA,EACNX,KAAMA,EACNQ,SAAU3C,IAAM0C,EAChBoB,SAAUnG,EAAMmG,SAChBlB,SAAUA,EACVmB,SAAU/D,EAAIgD,EACdC,QAASA,GAAW,EACpBe,QAAS,SAACC,GACNtG,EAAMuG,aAAapB,EAAMX,EAAK7D,GAAI2F,KATjC9B,EAAK7D,OAahBsE,GAAY,qBAAKhF,UAAU,eAgBzC,SAASiG,EAASlG,GAAuB,IAEjCgF,EAMAhF,EANAgF,SACAmB,EAKAnG,EALAmG,SACAlB,EAIAjF,EAJAiF,SACAoB,EAGArG,EAHAqG,QACAf,EAEAtF,EAFAsF,QACAH,EACAnF,EADAmF,KAEEM,EAAU9B,iBAAuB,MAGjC6C,EAAelC,uBAAY,WAC7B,GAAwB,OAApBmB,EAAQ5B,QAAkB,CAC1B,IAAM4C,EAAKhB,EAAQ5B,QACf6C,EAAOD,EAAGE,WAED,UAATxB,IACAuB,GAAQhF,EAAY4D,IAGxB,IAAMgB,EAAiB,CACnBM,IAAKH,EAAGI,UAAYnF,EAZb,MAaPgF,OACAI,MAAOL,EAAGM,YACVC,OAAQP,EAAGQ,cAEfZ,EAAQC,MAEb,CAACb,EAASH,EAASH,EAAMkB,IAW5B,OATApC,qBAAU,WACN,IAAMiD,EAAkB/C,YAAW,WAC3Ba,IAAaC,GACbuB,MAEL,IACH,OAAO,kBAAMpC,aAAa8C,MAC3B,CAAClC,EAAUC,EAAUuB,IAGpB,qBACIW,IAAK1B,EACLxF,UAAU,UACVmH,MAAO,CACHR,IAAI,GAAD,OAAK5G,EAAMoG,SAAX,OACHiB,UAAU,oBAAD,OApCF,KAoCE,wBAEbhB,QAAS,WACArB,GACDwB,KATZ,SAaI,cAAC,EAAD,2BACQxG,EAAMwE,MADd,IAEIM,KAAMqB,EACN/F,KAAK,a,yBClHN,SAASkH,EAAMtH,GAAe,IAErCuH,EAIAvH,EAJAuH,SACAC,EAGAxH,EAHAwH,UACAC,EAEAzH,EAFAyH,YACAC,EACA1H,EADA0H,QAEEC,EAAYhE,iBAAuB,MAWzC,OATAM,qBAAU,WACN,IAAM2D,EAAoBzD,YAAW,WAC7BsD,GACAC,EAAQD,KAtBG,KAyBnB,OAAO,kBAAMrD,aAAawD,MAC3B,CAACH,EAAaC,IAGb,sBAAKzH,UAAU,kBAAkBkH,IAAKQ,EAAtC,UACI,cAACE,EAAD,CACI1C,KAAK,OACLX,KAAM+C,EAAS/C,KACf8B,KAAMiB,EAASjB,KACfwB,QAASH,EAAU9D,QACnBkE,OAA8B,SAAtB/H,EAAMgI,YAAyB,EAAI,EAC3CP,YAAaA,IAEjB,cAACI,EAAD,CACI1C,KAAK,QACLX,KAAMgD,EAAUhD,KAChB8B,KAAMkB,EAAUlB,KAChBwB,QAASH,EAAU9D,QACnBkE,OAA8B,UAAtB/H,EAAMgI,YAA0B,EAAI,EAC5CP,YAAaA,OAe7B,SAASI,EAAU7H,GAAwB,IAAD,EAChC2H,EAAYM,IAAMtE,OAAO,MAE3BwB,EAIAnF,EAJAmF,KACAX,EAGAxE,EAHAwE,KACAsD,EAEA9H,EAFA8H,QACAL,EACAzH,EADAyH,YAGES,EAAWlI,EAAMsG,KACnBA,EAAO,GACX,GAAI4B,GAAwB,OAAZJ,EAAkB,CAC9B,IAAIpB,EAAOwB,EAASxB,KACP,SAATvB,EACAuB,GAAQoB,EAAQnB,WACA,UAATxB,IACPuB,GAAQoB,EAAQf,aAEpBT,EAAO,CACHM,IAAKsB,EAAStB,IAAMkB,EAAQjB,UAC5BH,OACAI,MAAOoB,EAASpB,MAChBE,OAAQkB,EAASlB,QAIzB,IAAM/G,EAAYC,IAAG,qBAAD,gCACTiF,EADS,SACKA,GADL,kCAEFsC,GAAgBA,GAFd,IAKpB,OACI,cAACU,EAAA,EAAD,CACIC,GAAI5D,IAASiD,EACbY,QAASV,EACTW,eAAa,EACbC,QA/Fe,IAgGfC,WAAW,eALf,SAOI,qBACIrB,IAAKQ,EACL1H,UAAWA,EACXmH,MAAK,2BACEd,GADF,IAEDyB,OAAQ/H,EAAM+H,SALtB,SAQI,sBAAK9H,UAAU,aAAf,UACI,qBAAKA,UAAU,aAAf,SACMuE,GACE,cAAC,EAAD,2BACQA,GADR,IAEIpE,KAAK,gBAIjB,qBAAKH,UAAU,YAAf,SACMuE,GACE,cAAC,EAAD,2BACQA,GADR,IAEIM,MAAI,EACJ1E,KAAK,uB,MCpFtB,SAASqI,EAAKzI,GACzB,IAAM0I,EAAc/E,iBAAO,MACrB1D,EAAYC,IAAG,sBAAuBF,EAAMC,WAclD,OAZA0I,2BAAgB,WACZ,IAAMC,EAAgB,YA5CL,SAACnC,GACtB,IAAMb,EAAkBD,SAASC,gBACjC,GAAKa,GAAOb,EAAZ,CAIA,IAAMxE,EAASC,OAAOC,WAChBC,EAAUF,OAAOG,YACjBqH,EAAiBzH,EAASG,EAC1B6F,EAAQ,CACVN,MAAO1F,EACP4F,OAAQzF,GAERsH,EAAiB1H,EACjBiG,EAAMN,MAAQvF,EAAUJ,EACjB0H,EPtBwB,IOuB/BzB,EAAMN,MPvByB,EOuBjBvF,GAGd6F,EAAMN,MAAQ1F,IACdgG,EAAMN,MAAQ1F,EACdgG,EAAMJ,OAAS5F,EAASD,GAG5B2H,OAAOC,KAAK3B,GAAOrB,SAAQ,SAAC5C,GACX,UAATA,GAA6B,WAATA,GACpBsD,EAAGW,MAAM4B,YAAY7F,EAArB,UAA8BiE,EAAMjE,GAApC,UAIR,IAAM8F,EAAWrH,KAAKC,IAAKT,EPxCE,IOwC4BG,EAAUL,GACnE0E,EAAgBwB,MAAM6B,SAAtB,UAAoCA,EAApC,OAcQC,CAAiBR,EAAY7E,UAKjC,OAHA+E,IAEAvH,OAAOI,iBAAiB,SAAUmH,GAC3B,WACHvH,OAAO8H,oBAAoB,SAAUP,MAE1C,IAGC,qBACIzB,IAAKuB,EACLzI,UAAWA,EAFf,SAIMD,EAAMoJ,W,MC5DL,SAASC,EAAOrJ,GAC3B,OACI,wBACIsJ,KAAK,SACLrJ,UAAWC,IAAG,SAAUF,EAAMC,WAC9BoG,QAASrG,EAAMqG,QAHnB,SAKKrG,EAAMuJ,O,MCJJ,SAASC,EAAQxJ,GAC5B,OAAOyJ,IAASC,aAER,eAACjB,EAAD,CAAexI,UAAU,UAAzB,UACI,qBAAKA,UAAU,YACf,sBAAKA,UAAU,kBAAf,UACI,oBAAIA,UAAU,gBAAd,SAA+BD,EAAM2J,QACrC,mBAAG1J,UAAU,eAAb,SAA6BD,EAAMuJ,OACnC,cAACF,EAAD,CAAiBE,KAAMvJ,EAAM4J,WAAYvD,QAASrG,EAAMqG,gBAIpEV,SAASkE,M,MCfF,SAASC,EAAO9J,GAC3B,IAAMC,EAAYC,IAAG,mBAAoBF,EAAMC,WAC/C,OACI,wBAAOA,UAAWA,EAAlB,UACI,sBAAKA,UAAU,SAAf,UACI,uBACIqJ,KAAK,WACLS,SAAU,SAACC,GACPhK,EAAM+J,SAASC,EAAEC,OAAOC,YAGhC,sBAAMjK,UAAU,cAEpB,mBAAGA,UAAU,cAAb,SAA4BD,EAAMuJ,U,MCZ/B,SAASY,EAAOnK,GAC3B,OACI,sBAAKC,UAAU,mBAAf,UACI,qBAAKA,UAAU,oBAAf,SACKD,EAAMoK,YAEX,cAACN,EAAD,CACIP,KAAK,eACLtJ,UAAU,YACV8J,SAAU/J,EAAMqK,sBAEpB,cAACP,EAAD,CACIP,KAAK,WACLtJ,UAAU,YACV8J,SAAU/J,EAAMsK,mBAEpB,qBAAKrK,UAAU,qBAAf,SACKD,EAAMuK,gB,UCVjBC,EAAgC,GAEvB,SAASC,IACpB,IAAMC,EAAW/G,iBAAO,IAAIC,EAAU,UAChC+G,EAAYhH,iBAAO,IAAIC,EAAU,QAFV,EAGeE,oBAAS,GAHxB,mBAGtB8G,EAHsB,KAGNC,EAHM,OAIY/G,mBAAwB0G,GAJpC,mBAItBjD,EAJsB,KAIZuD,EAJY,OAKKhH,mBAAS,GALd,mBAKtBsG,EALsB,KAKXW,EALW,OAMcjH,mBAAwB0G,GANtC,mBAMtBhD,EANsB,KAMXwD,EANW,OAOOlH,mBAAS,GAPhB,mBAOtByG,EAPsB,KAOVU,EAPU,OAQSnH,qBART,mBAQtBkE,EARsB,KAQTkD,EARS,OASSpH,qBATT,mBAStB2D,EATsB,KAST0D,EATS,OAUWrH,oBAAS,GAVpB,mBAUtBsH,EAVsB,KAURC,EAVQ,OAWavH,oBAAS,GAXtB,mBAWtBwH,EAXsB,KAWPC,EAXO,OAYGzH,oBAAS,GAZZ,mBAYtB0H,EAZsB,KAYZC,EAZY,KAcvBC,EAAoBpH,uBAAY,SAACa,EAAYwG,EAAgBzD,GAC/D,GAAa,SAAT/C,EAAiB,CACjB,IAAMX,EAAOkG,EAAS7G,QAAQb,aAAa2I,GACvCnH,IACAsG,EAAqB,CACjBtG,KAAMA,EACN8B,KAAM4B,IAELV,EAAUhD,MACX0G,EAAe,aAGpB,CACH,IAAM1G,EAAOmG,EAAU9G,QAAQb,aAAa2I,GACxCnH,IACAwG,EAAsB,CAClBxG,KAAMA,EACN8B,KAAM4B,IAELX,EAAS/C,MACV0G,EAAe,aAI5B,CAAC3D,EAAS/C,KAAMgD,EAAUhD,OAEvBoH,GAAWtH,uBAAY,SAACuH,GAC1B,OAAQA,GACJ,IAAK,OACDd,EAAaX,EAAY,GACzB,MACJ,IAAK,QACDa,EAAcV,EAAa,GAKnCY,OAAeW,GACfhB,EAAqBN,GACrBQ,EAAsBR,KACvB,CAACJ,EAAWG,IAETwB,GAAUzH,uBAAY,WACxBoG,EAAS7G,QAAQT,UACjBuH,EAAU9G,QAAQT,UAClB2H,EAAa,GACbE,EAAc,GACdQ,GAAY,KACb,IA6BH,GA3BAxH,qBAAU,WACN,IAAM+H,EAAmB7H,YAAW,WAE5B,IAAI0H,EADJtE,EAAS/C,MAAQgD,EAAUhD,OAGvBqH,EADAtE,EAAS/C,KAAK/D,KAAO+G,EAAUhD,KAAK/D,KAC3B,OACF8G,EAAS/C,KAAK/D,KAAO+G,EAAUhD,KAAK/D,KAClC,QAEA,OAEb0K,EAAeU,MA/EL,KAkFlB,OAAO,kBAAMzH,aAAa4H,MAC3B,CAACzE,EAAS/C,KAAMgD,EAAUhD,KAAM4F,EAAWG,IAE9CtG,qBAAU,WAEDwD,GAC0C,IAAxCiD,EAAS7G,QAAQ3B,YAAYM,QACY,IAAzCmI,EAAU9G,QAAQ3B,YAAYM,QAEjCiJ,GAAY,KAEjB,CAAChE,KAECmD,EACD,OAAO,cAACpH,EAAD,CAAoBC,UAAW,kBAAMoH,GAAkB,MAGlE,IAEQgB,GACAI,GAHJC,GAAe,GACfV,IAGIpB,EAAYG,GACZsB,GAAS,OACTI,GAAc7B,GACPA,EAAYG,IACnBsB,GAAS,QACTI,GAAc1B,GAId2B,GADAL,GACY,UAAMA,GAAN,mCAAuCI,IAEvC,4BAIpB,OACI,eAACxD,EAAD,CAAexI,UAAU,gBAAzB,UACI,cAACkK,EAAD,CACIC,UAAWA,EACXG,WAAYA,EACZD,iBAAkBe,EAClBhB,oBAAqBkB,IAEzB,cAAC,EAAD,CACIvG,SAAUoG,EACVjF,SAAUmF,EACVnG,KAAK,OACLF,WAAYsC,EAAS/C,KACrBU,KAAMwF,EAAS7G,QAAQ3B,YACvBqE,aAAcmF,IAElB,cAACpE,EAAD,CACIC,SAAUA,EACVC,UAAWA,EACXQ,YAAaA,EACbN,QAASkE,GACTnE,YAAaA,IAEjB,cAAC,EAAD,CACIzC,UAAQ,EACRG,KAAK,QACLF,WAAYuC,EAAUhD,KACtBU,KAAMyF,EAAU9G,QAAQ3B,YACxBqE,aAAcmF,IAEhBF,GACE,cAAChC,EAAD,CACIG,MAAM,YACNJ,KAAM2C,GACNtC,WAAW,UACXvD,QAAS0F,QCxK7B,IAYeI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFd3C,IAASmD,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlH,SAASmH,eAAe,SAM1BX,M","file":"static/js/main.7e2ebaea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.4f271669.svg\";","// @flow\n\nimport * as React from 'react';\nimport cl from 'classnames';\nimport loadingIcon from './loading.svg';\nimport './style.css';\n\ninterface Props {\n    size?: string,\n    className?: string | { [className: string]: any },\n}\n\nexport default function Loading(props: Props) {\n    const className = cl(\n        'loading-icon',\n        {\n            small: props.size === 'small',\n            'big': props.size === 'big',\n        },\n        props.className\n    );\n\n    return (\n        <img src={loadingIcon} alt=\"\" className={className} />\n    );\n}\n","\nimport { Color } from '../types';\nimport appParams from '../../package.json';\n\ninterface Props {\n    id: string,\n    rank: number,\n    rankId: string,\n    color: Color,\n}\n\nexport default class Card {\n    constructor(props: Props) {\n        this.id = props.id;\n        this.rank = props.rank;\n        this.rankId = props.rankId;\n        this.front = `/${appParams.name}/cards/${props.id}.png`;\n        this.back = `/${appParams.name}/cards/${props.color}_back.png`;\n        this.color = props.color;\n    }\n\n    rank: number;\n\n    rankId: string;\n\n    id: string;\n\n    front: string;\n\n    back: string;\n\n    color: Color;\n}","\nexport const SCREEN_BASE_WIDTH = 192; // in rem\nexport const SCREEN_BASE_HEIGHT = 108; // in rem\nexport const SCREEN_MIN_ASPECT_RATIO = 1.777;\nexport const SCREEN_MAX_ASPECT_RATIO = 2;\n","\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n} from '../constants';\n\n// https://bost.ocks.org/mike/shuffle/\nexport function arrayShuffle<T>(array: T[]): T[] {\n    const copy: T[] = [];\n    let n = array.length\n    let i;\n\n    while (n) {\n        i = Math.floor(Math.random() * array.length);\n        if (i in array) {\n            copy.push(array[i]);\n            delete array[i];\n            n--;\n        }\n    }\n\n    return copy;\n}\n\nexport const getCssProperty = (\n    property: string[],\n    element?: HTMLElement | null\n): string[] => {\n    const result: string[] = [];\n\n    if (!document.documentElement) {\n        return result;\n    }\n\n    const styles = getComputedStyle(element || document.documentElement);\n\n    property.forEach((item: string) => {\n        result.push(styles.getPropertyValue(`--${item}`));\n    });\n\n    return result;\n};\n\nlet dWidth = window.innerWidth;\nlet dHeight = window.innerHeight;\n\nwindow.addEventListener('resize', () => {\n    dWidth = window.innerWidth;\n    dHeight = window.innerHeight;\n});\n\nexport const fromPxToRem = (sizeInPixels: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInPixels / fontSize;\n};\n\nexport const fromRemToPx = (sizeInRems: number): number => {\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n\n    return sizeInRems * fontSize;\n};\n","\nimport Card from './Card';\nimport { arrayShuffle } from '../utils';\nimport { Color } from '../types';\n\nconst ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\nconst suits = ['C', 'D', 'H', 'S'];\n\nexport default class Deck {\n    constructor(color: Color) {\n        for (let i = 0, l = ranks.length; i < l; i++) {\n            for (let j = 0, jl = suits.length; j < jl; j++) {\n                const id = `${ranks[i]}${suits[j]}`;\n                this.cards.push(new Card({\n                    rank: i,\n                    rankId: ranks[i],\n                    id,\n                    color,\n                }));\n            }\n        }\n        this.cardsInDeck = [ ...this.cards ];\n        this.shuffle();\n    }\n\n    cards: Card[] = [];\n\n    cardsInDeck: Card[] = [];\n\n    shuffle = () => {\n        this.cardsInDeck = arrayShuffle(this.cardsInDeck);\n    };\n\n    pullCardByIndex = (index: number): Card | undefined => {\n        if (index < 0 || index > this.cardsInDeck.length) {\n            return;\n        }\n\n        return this.cardsInDeck.splice(index, 1)[0];\n    };\n\n    pullCardById = (id: string): Card | undefined => {\n        const cardIndex = this.cardsInDeck.findIndex(item => item.id === id);\n\n        if (cardIndex !== -1) {\n            return this.cardsInDeck.splice(cardIndex, 1)[0];\n        }\n\n        return undefined;\n    };\n\n    collect = () => {\n        this.cardsInDeck = [ ...this.cards ];\n        this.shuffle();\n    };\n}","\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport Loading from '../loading';\nimport DeckModel from '../../models/Deck';\nimport CardModel from '../../models/Card';\nimport './style.css';\n\nconst TIMEOUT = 5000;\n\ninterface Props {\n    onLoading: () => void,\n}\n\nexport default function Preloader(props: Props) {\n    const { onLoading } = props;\n    const deck = useRef(new DeckModel('green'));\n    const cardsList = deck.current.cards;\n    const [loadingCounter, setLoadingCounter] = useState(0);\n\n    useEffect(() => {\n        if (loadingCounter === cardsList.length - 1) {\n            onLoading();\n        }\n        const timeoutTimer = setTimeout(() => {\n            onLoading();\n        }, TIMEOUT);\n        return () => clearTimeout(timeoutTimer);\n    }, [loadingCounter, cardsList.length, onLoading]);\n\n    const imageLoadingHandler = useCallback(() => {\n        setLoadingCounter(loadingCounter + 1);\n    }, [loadingCounter]);\n\n    return (\n        <div className=\"preloader-container blocker\">\n            <Loading size=\"small\" />\n            <div className=\"preloader-deck\">\n                { cardsList.map((card: CardModel) => (\n                    <img\n                        key={card.id}\n                        src={card.front}\n                        className=\"pcd-card\"\n                        alt=\"\"\n                        onLoad={imageLoadingHandler}\n                        onError={onLoading}\n                    />\n                )) }\n            </div>\n        </div>\n    )\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport './style.css';\n\ninterface Props extends CardModel {\n    size: 'small' | 'big' | 'flexible',\n    open?: boolean,\n}\n\nexport default function Card(props: Props) {\n    if (props.id === '') {\n        return null;\n    }\n\n    const cardClassName = cl('cc-image', {\n        small: props.size === 'small',\n        big: props.size === 'big',\n        flexible: props.size === 'flexible',\n    });\n\n    return (\n        <div className=\"card-container\">\n            <img\n                src={props.open ? props.front : props.back}\n                className={cardClassName}\n                alt=\"\"\n            />\n        </div>\n    );\n}","\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport cl from 'classnames';\nimport CardModel from '../../models/Card';\nimport CardComponent from '../card';\nimport { SCREEN_BASE_HEIGHT } from '../../constants';\nimport {\n    fromRemToPx,\n    getCssProperty,\n} from '../../utils';\nimport type {\n    Side,\n    CardRect,\n} from '../../types';\nimport './style.css';\n\nconst cardWidth = 10; // in rem\nconst deckHeight = (SCREEN_BASE_HEIGHT - cardWidth); // in rem\n\ninterface Props {\n    autoPlay?: boolean,\n    side: Side,\n    disabled: boolean,\n    revealed?: boolean,\n    list: CardModel[],\n    onCardChoose: (side: Side, cardId: string, rect: CardRect) => void,\n}\n\nexport default function Deck(props: Props) {\n    const {\n        autoPlay,\n        disabled,\n        list,\n        side,\n    } = props;\n\n    const containerClassName = cl('deck-container', `dc-${side}`, {\n        disabled,\n    });\n\n    const cardMargin = deckHeight / (list.length - 1);\n    let padding = parseInt(getCssProperty(['hover-padding'])[0],10);\n\n    let autoPlayCard: number;\n    if (autoPlay && !disabled) {\n        autoPlayCard = Math.floor(Math.random() * list.length);\n    }\n\n    return (\n        <div className={containerClassName}>\n            {list.map((card: CardModel, i) => (\n                <DeckCard\n                    key={card.id}\n                    side={side}\n                    card={card}\n                    autoPlay={i === autoPlayCard}\n                    revealed={props.revealed}\n                    disabled={disabled}\n                    position={i * cardMargin}\n                    padding={padding || 0}\n                    onClick={(rect: CardRect) => {\n                        props.onCardChoose(side, card.id, rect);\n                    }}\n                />\n            ))}\n            { disabled && <div className=\"blocker\" /> }\n        </div>\n    );\n}\n\ninterface DeckCardProps {\n    side: Side,\n    card: CardModel,\n    autoPlay: boolean,\n    revealed?: boolean,\n    disabled: boolean,\n    position: number,\n    padding: number,\n    onClick: (rect: CardRect) => any,\n}\n\nfunction DeckCard(props: DeckCardProps) {\n    const {\n        autoPlay,\n        revealed,\n        disabled,\n        onClick,\n        padding,\n        side,\n    } = props;\n    const element = useRef<HTMLDivElement>(null);\n    const translateY = 2.65;\n\n    const clickHandler = useCallback(() => {\n        if (element.current !== null) {\n            const el = element.current;\n            let left = el.offsetLeft;\n\n            if (side === 'right') {\n                left -= fromRemToPx(padding);\n            }\n\n            const rect: CardRect = {\n                top: el.offsetTop - fromRemToPx(translateY),\n                left,\n                width: el.offsetWidth,\n                height: el.offsetHeight,\n            };\n            onClick(rect);\n        }\n    }, [element, padding, side, onClick]);\n\n    useEffect(() => {\n        const autoSelectFrame = setTimeout(() => {\n            if (autoPlay && !disabled) {\n                clickHandler();\n            }\n        }, 10);\n        return () => clearTimeout(autoSelectFrame);\n    }, [autoPlay, disabled, clickHandler]);\n\n    return (\n        <div\n            ref={element}\n            className=\"dc-item\"\n            style={{\n                top: `${props.position}rem`,\n                transform: `translate(-50%, -${translateY}rem) rotate(-90deg)`,\n            }}\n            onClick={() => {\n                if (!autoPlay) {\n                    clickHandler();\n                }\n            }}\n        >\n            <CardComponent\n                {...props.card}\n                open={revealed}\n                size=\"small\"\n            />\n        </div>\n    );\n}","\nimport React, { useRef, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport cl from 'classnames';\nimport CardComponent from '../card/Card';\nimport CardModel from '../../models/Card';\nimport {\n    SideSelection,\n    Side,\n    CardRect,\n    Winner,\n} from '../../types';\nimport './style.css';\n\nconst REFRESH_TABLE_TIME = 500;\n\ninterface Props {\n    leftSide: SideSelection,\n    rightSide: SideSelection,\n    firstAttack?: Side,\n    roundWinner?: Winner,\n    onClear: (roundWinner: Winner) => void,\n}\n\nexport default function Table(props: Props) {\n    const {\n        leftSide,\n        rightSide,\n        roundWinner,\n        onClear,\n    } = props;\n    const container = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const refreshTableTimer = setTimeout(() => {\n            if (roundWinner) {\n                onClear(roundWinner); // eslint-disable-line react-hooks/exhaustive-deps\n            }\n        }, REFRESH_TABLE_TIME);\n        return () => clearTimeout(refreshTableTimer);\n    }, [roundWinner, onClear]);\n\n    return (\n        <div className=\"table-container\" ref={container}>\n            <TableCard\n                side=\"left\"\n                card={leftSide.card}\n                rect={leftSide.rect}\n                wrapper={container.current}\n                zIndex={props.firstAttack === 'left' ? 1 : 2}\n                roundWinner={roundWinner}\n            />\n            <TableCard\n                side=\"right\"\n                card={rightSide.card}\n                rect={rightSide.rect}\n                wrapper={container.current}\n                zIndex={props.firstAttack === 'right' ? 1 : 2}\n                roundWinner={roundWinner}\n            />\n        </div>\n    );\n}\n\ninterface TableCardProps {\n    side: Side,\n    card?: CardModel,\n    rect?: CardRect,\n    wrapper: HTMLDivElement | null,\n    zIndex: number,\n    roundWinner?: Winner,\n}\n\nfunction TableCard(props: TableCardProps) {\n    const container = React.useRef(null);\n    const {\n        side,\n        card,\n        wrapper,\n        roundWinner,\n    } = props;\n\n    const cardRect = props.rect;\n    let rect = {};\n    if (cardRect && wrapper !== null) {\n        let left = cardRect.left;\n        if (side === 'left') {\n            left -= wrapper.offsetLeft;\n        } else if (side === 'right') {\n            left += wrapper.offsetWidth;\n        }\n        rect = {\n            top: cardRect.top - wrapper.offsetTop,\n            left,\n            width: cardRect.width,\n            height: cardRect.height,\n        };\n    }\n\n    const className = cl('tc-card-container', {\n        [`tc-${side}-card`]: side,\n        [`tc-winner-${roundWinner}`]: roundWinner,\n    });\n\n    return (\n        <CSSTransition\n            in={card && !roundWinner}\n            nodeRef={container}\n            unmountOnExit\n            timeout={REFRESH_TABLE_TIME}\n            classNames=\"tccc-wrapper\"\n        >\n            <div\n                ref={container}\n                className={className}\n                style={{\n                    ...rect,\n                    zIndex: props.zIndex,\n                }}\n            >\n                <div className=\"tccc-inner\">\n                    <div className=\"rccc-front\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                size=\"flexible\"\n                            />\n                        )}\n                    </div>\n                    <div className=\"rccc-back\">\n                        { card && (\n                            <CardComponent\n                                {...card}\n                                open\n                                size=\"flexible\"\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </CSSTransition>\n    );\n}","\nimport React, { useRef, useLayoutEffect } from 'react';\nimport cl from 'classnames';\nimport {\n    SCREEN_BASE_WIDTH,\n    SCREEN_BASE_HEIGHT,\n    SCREEN_MIN_ASPECT_RATIO,\n    SCREEN_MAX_ASPECT_RATIO,\n} from '../../constants';\nimport './style.css';\n\nconst setContainerSize = (el: HTMLDivElement | null) => {\n    const documentElement = document.documentElement;\n    if (!el || !documentElement) {\n        return;\n    }\n\n    const dWidth = window.innerWidth;\n    const dHeight = window.innerHeight;\n    const curAspectRatio = dWidth / dHeight;\n    const style = {\n        width: dWidth,\n        height: dHeight,\n    };\n    if (curAspectRatio < SCREEN_MIN_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MIN_ASPECT_RATIO;\n    } else if (curAspectRatio > SCREEN_MAX_ASPECT_RATIO) {\n        style.width = dHeight * SCREEN_MAX_ASPECT_RATIO;\n    }\n\n    if (style.width > dWidth) {\n        style.width = dWidth;\n        style.height = dWidth / SCREEN_MIN_ASPECT_RATIO;\n    }\n\n    Object.keys(style).forEach((item) => {\n        if (item === 'width' || item === 'height') {\n            el.style.setProperty(item, `${style[item]}px`);\n        }\n    });\n\n    const fontSize = Math.min((dWidth / SCREEN_BASE_WIDTH), (dHeight / SCREEN_BASE_HEIGHT));\n    documentElement.style.fontSize = `${fontSize}px`;\n};\n\ninterface Props {\n    className?: string | { [className: string]: any },\n    children: React.ReactNode,\n}\n\nexport default function Wrap(props: Props) {\n    const containerEl = useRef(null);\n    const className = cl('resizable-container', props.className);\n\n    useLayoutEffect(() => {\n        const resizeHandler = () => {\n            setContainerSize(containerEl.current);\n        };\n        resizeHandler();\n\n        window.addEventListener('resize', resizeHandler);\n        return () => {\n            window.removeEventListener('resize', resizeHandler);\n        };\n    }, []);\n\n    return (\n        <div\n            ref={containerEl}\n            className={className}\n        >\n            { props.children }\n        </div>\n    );\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    className?: string | { [className: string]: any },\n    onClick: () => any,\n}\n\nexport default function Button(props: Props) {\n    return (\n        <button\n            type=\"button\"\n            className={cl('button', props.className)}\n            onClick={props.onClick}\n        >\n            {props.text}\n        </button>\n    );\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport WrapComponent from '../wrap';\nimport ButtonComponent from '../button';\nimport './style.css';\n\ninterface Props {\n    title: string,\n    text: string,\n    buttonText: string,\n    onClick: () => any,\n}\n\nexport default function Overlay(props: Props) {\n    return ReactDOM.createPortal(\n        (\n            <WrapComponent className=\"overlay\">\n                <div className=\"blocker\" />\n                <div className=\"overlay-content\">\n                    <h1 className=\"overlay-title\">{props.title}</h1>\n                    <p className=\"overlay-text\">{props.text}</p>\n                    <ButtonComponent text={props.buttonText} onClick={props.onClick} />\n                </div>\n            </WrapComponent>\n        ),\n        document.body\n    );\n}","\nimport React from 'react';\nimport cl from 'classnames';\nimport './style.css';\n\ninterface Props {\n    text: string,\n    className?: string | { [className: string]: any },\n    onChange: (value: boolean) => void,\n}\n\nexport default function Switch(props: Props) {\n    const className = cl('switch-container', props.className);\n    return (\n        <label className={className}>\n            <div className=\"switch\">\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                        props.onChange(e.target.checked);\n                    }}\n                />\n                <span className=\"slider\" />\n            </div>\n            <p className=\"switch-text\">{props.text}</p>\n        </label>\n    );\n};\n","\nimport React from 'react';\nimport SwitchComponent from '../switch';\nimport './style.css';\n\ninterface Props {\n    leftScore: number,\n    rightScore: number,\n    onChangeAutoPlay: (value: boolean) => void,\n    onChangeRevealCards: (value: boolean) => void,\n}\n\nexport default function Header(props: Props) {\n    return (\n        <div className=\"header-container\">\n            <div className=\"hc-score hcs-left\">\n                {props.leftScore}\n            </div>\n            <SwitchComponent\n                text=\"Reveal cards\"\n                className=\"hc-switch\"\n                onChange={props.onChangeRevealCards}\n            />\n            <SwitchComponent\n                text=\"Autoplay\"\n                className=\"hc-switch\"\n                onChange={props.onChangeAutoPlay}\n            />\n            <div className=\"hc-score hcs-right\">\n                {props.rightScore}\n            </div>\n        </div>\n    );\n}","\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport PreloaderComponent from './components/preloader';\nimport DeckComponent from './components/deck';\nimport TableComponent from './components/table';\nimport WrapComponent from './components/wrap';\nimport OverlayComponent from './components/overlay';\nimport HeaderComponent from './components/header';\nimport DeckModel from './models/Deck';\nimport type {\n    SideSelection,\n    Side,\n    CardRect,\n    Winner,\n} from './types';\nimport './style.css';\n\nconst FINISH_ROUND_TIME = 1000;\n\nconst emptySelection: SideSelection = {};\n\nexport default function Canvas() {\n    const leftDeck = useRef(new DeckModel('green'));\n    const rightDeck = useRef(new DeckModel('red'));\n    const [cardsPreloaded, setCardsPreloaded] = useState(false);\n    const [leftSide, setLeftSideSelection] = useState<SideSelection>(emptySelection);\n    const [leftScore, setLeftScore] = useState(0);\n    const [rightSide, setRightSideSelection] = useState<SideSelection>(emptySelection);\n    const [rightScore, setRightScore] = useState(0);\n    const [firstAttack, setFirstAttack] = useState<Side>();\n    const [roundWinner, setRoundWinner] = useState<Winner>();\n    const [fullAutoPlay, setFullAutoPlay] = useState(false);\n    const [cardsRevealed, setCardsRevealed] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n\n    const cardChooseHandler = useCallback((side: Side, cardId: string, cardRect: CardRect) => {\n        if (side === 'left') {\n            const card = leftDeck.current.pullCardById(cardId);\n            if (card) {\n                setLeftSideSelection({\n                    card: card,\n                    rect: cardRect,\n                });\n                if (!rightSide.card) {\n                    setFirstAttack('left');\n                }\n            }\n        } else {\n            const card = rightDeck.current.pullCardById(cardId);\n            if (card) {\n                setRightSideSelection({\n                    card: card,\n                    rect: cardRect,\n                });\n                if (!leftSide.card) {\n                    setFirstAttack('right');\n                }\n            }\n        }\n    }, [leftSide.card, rightSide.card]);\n\n    const setScore = useCallback((winner: Winner) => {\n        switch (winner) {\n            case \"left\":\n                setLeftScore(leftScore + 1);\n                break;\n            case \"right\":\n                setRightScore(rightScore + 1);\n                break;\n            default:\n        }\n\n        setRoundWinner(undefined);\n        setLeftSideSelection(emptySelection);\n        setRightSideSelection(emptySelection);\n    }, [leftScore, rightScore]);\n\n    const restart = useCallback(() => {\n        leftDeck.current.collect();\n        rightDeck.current.collect();\n        setLeftScore(0);\n        setRightScore(0);\n        setGameOver(false);\n    }, []);\n\n    useEffect(() => {\n        const finishRoundTimer = setTimeout(() => {\n            if (leftSide.card && rightSide.card) {\n                let winner: Winner | undefined;\n                if (leftSide.card.rank > rightSide.card.rank) {\n                    winner = 'left';\n                } else if (leftSide.card.rank < rightSide.card.rank) {\n                    winner = 'right';\n                } else {\n                    winner = 'draw';\n                }\n                setRoundWinner(winner);\n            }\n        }, FINISH_ROUND_TIME);\n        return () => clearTimeout(finishRoundTimer);\n    }, [leftSide.card, rightSide.card, leftScore, rightScore]);\n\n    useEffect(() => {\n        if (\n            !roundWinner\n            && leftDeck.current.cardsInDeck.length === 0\n            && rightDeck.current.cardsInDeck.length === 0\n        ) {\n            setGameOver(true);\n        }\n    }, [roundWinner]);\n\n    if (!cardsPreloaded) {\n        return <PreloaderComponent onLoading={() => setCardsPreloaded(true)} />;\n    }\n\n    let gameOverText = '';\n    if (gameOver) {\n        let winner;\n        let winnerScore;\n        if (leftScore > rightScore) {\n            winner = 'left';\n            winnerScore = leftScore;\n        } else if (leftScore < rightScore) {\n            winner = 'right';\n            winnerScore = rightScore;\n        }\n\n        if (winner) {\n            gameOverText = `${winner} player wins with score ${winnerScore}`;\n        } else {\n            gameOverText = `The game ended in a draw`;\n        }\n    }\n\n    return (\n        <WrapComponent className=\"app-container\">\n            <HeaderComponent\n                leftScore={leftScore}\n                rightScore={rightScore}\n                onChangeAutoPlay={setFullAutoPlay}\n                onChangeRevealCards={setCardsRevealed}\n            />\n            <DeckComponent\n                autoPlay={fullAutoPlay}\n                revealed={cardsRevealed}\n                side=\"left\"\n                disabled={!!leftSide.card}\n                list={leftDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            <TableComponent\n                leftSide={leftSide}\n                rightSide={rightSide}\n                firstAttack={firstAttack}\n                onClear={setScore}\n                roundWinner={roundWinner}\n            />\n            <DeckComponent\n                autoPlay\n                side=\"right\"\n                disabled={!!rightSide.card}\n                list={rightDeck.current.cardsInDeck}\n                onCardChoose={cardChooseHandler}\n            />\n            { gameOver && (\n                <OverlayComponent\n                    title=\"Game Over\"\n                    text={gameOverText}\n                    buttonText=\"Restart\"\n                    onClick={restart}\n                />\n            ) }\n        </WrapComponent>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}